/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 35.0, "minX": 0.0, "maxY": 20063.0, "series": [{"data": [[0.0, 35.0], [0.1, 35.0], [0.2, 35.0], [0.3, 35.0], [0.4, 35.0], [0.5, 35.0], [0.6, 35.0], [0.7, 35.0], [0.8, 36.0], [0.9, 36.0], [1.0, 36.0], [1.1, 36.0], [1.2, 36.0], [1.3, 36.0], [1.4, 36.0], [1.5, 36.0], [1.6, 36.0], [1.7, 36.0], [1.8, 36.0], [1.9, 36.0], [2.0, 36.0], [2.1, 36.0], [2.2, 36.0], [2.3, 36.0], [2.4, 36.0], [2.5, 36.0], [2.6, 36.0], [2.7, 36.0], [2.8, 36.0], [2.9, 36.0], [3.0, 36.0], [3.1, 36.0], [3.2, 36.0], [3.3, 36.0], [3.4, 36.0], [3.5, 36.0], [3.6, 36.0], [3.7, 36.0], [3.8, 36.0], [3.9, 36.0], [4.0, 36.0], [4.1, 36.0], [4.2, 36.0], [4.3, 36.0], [4.4, 36.0], [4.5, 36.0], [4.6, 36.0], [4.7, 37.0], [4.8, 37.0], [4.9, 37.0], [5.0, 37.0], [5.1, 37.0], [5.2, 37.0], [5.3, 37.0], [5.4, 37.0], [5.5, 37.0], [5.6, 37.0], [5.7, 37.0], [5.8, 37.0], [5.9, 37.0], [6.0, 37.0], [6.1, 37.0], [6.2, 37.0], [6.3, 37.0], [6.4, 37.0], [6.5, 37.0], [6.6, 37.0], [6.7, 37.0], [6.8, 37.0], [6.9, 37.0], [7.0, 37.0], [7.1, 37.0], [7.2, 37.0], [7.3, 37.0], [7.4, 37.0], [7.5, 37.0], [7.6, 37.0], [7.7, 37.0], [7.8, 37.0], [7.9, 37.0], [8.0, 37.0], [8.1, 37.0], [8.2, 37.0], [8.3, 37.0], [8.4, 37.0], [8.5, 37.0], [8.6, 38.0], [8.7, 38.0], [8.8, 38.0], [8.9, 38.0], [9.0, 38.0], [9.1, 38.0], [9.2, 38.0], [9.3, 38.0], [9.4, 38.0], [9.5, 38.0], [9.6, 38.0], [9.7, 38.0], [9.8, 38.0], [9.9, 38.0], [10.0, 38.0], [10.1, 38.0], [10.2, 38.0], [10.3, 38.0], [10.4, 38.0], [10.5, 38.0], [10.6, 38.0], [10.7, 38.0], [10.8, 38.0], [10.9, 38.0], [11.0, 39.0], [11.1, 39.0], [11.2, 39.0], [11.3, 39.0], [11.4, 39.0], [11.5, 39.0], [11.6, 39.0], [11.7, 39.0], [11.8, 39.0], [11.9, 39.0], [12.0, 39.0], [12.1, 39.0], [12.2, 39.0], [12.3, 39.0], [12.4, 39.0], [12.5, 39.0], [12.6, 39.0], [12.7, 39.0], [12.8, 39.0], [12.9, 39.0], [13.0, 39.0], [13.1, 39.0], [13.2, 39.0], [13.3, 39.0], [13.4, 40.0], [13.5, 40.0], [13.6, 40.0], [13.7, 40.0], [13.8, 40.0], [13.9, 40.0], [14.0, 40.0], [14.1, 40.0], [14.2, 40.0], [14.3, 40.0], [14.4, 40.0], [14.5, 40.0], [14.6, 40.0], [14.7, 40.0], [14.8, 40.0], [14.9, 40.0], [15.0, 40.0], [15.1, 40.0], [15.2, 40.0], [15.3, 40.0], [15.4, 41.0], [15.5, 41.0], [15.6, 41.0], [15.7, 41.0], [15.8, 41.0], [15.9, 41.0], [16.0, 41.0], [16.1, 41.0], [16.2, 41.0], [16.3, 41.0], [16.4, 41.0], [16.5, 41.0], [16.6, 41.0], [16.7, 41.0], [16.8, 41.0], [16.9, 41.0], [17.0, 42.0], [17.1, 42.0], [17.2, 42.0], [17.3, 42.0], [17.4, 42.0], [17.5, 42.0], [17.6, 42.0], [17.7, 42.0], [17.8, 42.0], [17.9, 42.0], [18.0, 42.0], [18.1, 43.0], [18.2, 43.0], [18.3, 43.0], [18.4, 43.0], [18.5, 43.0], [18.6, 43.0], [18.7, 43.0], [18.8, 43.0], [18.9, 43.0], [19.0, 43.0], [19.1, 44.0], [19.2, 44.0], [19.3, 44.0], [19.4, 44.0], [19.5, 44.0], [19.6, 44.0], [19.7, 45.0], [19.8, 45.0], [19.9, 45.0], [20.0, 45.0], [20.1, 45.0], [20.2, 45.0], [20.3, 46.0], [20.4, 46.0], [20.5, 46.0], [20.6, 46.0], [20.7, 46.0], [20.8, 46.0], [20.9, 46.0], [21.0, 46.0], [21.1, 46.0], [21.2, 47.0], [21.3, 47.0], [21.4, 47.0], [21.5, 47.0], [21.6, 48.0], [21.7, 48.0], [21.8, 48.0], [21.9, 48.0], [22.0, 48.0], [22.1, 49.0], [22.2, 49.0], [22.3, 49.0], [22.4, 49.0], [22.5, 50.0], [22.6, 50.0], [22.7, 50.0], [22.8, 50.0], [22.9, 51.0], [23.0, 51.0], [23.1, 52.0], [23.2, 52.0], [23.3, 52.0], [23.4, 52.0], [23.5, 52.0], [23.6, 53.0], [23.7, 53.0], [23.8, 53.0], [23.9, 53.0], [24.0, 53.0], [24.1, 54.0], [24.2, 54.0], [24.3, 54.0], [24.4, 54.0], [24.5, 54.0], [24.6, 54.0], [24.7, 54.0], [24.8, 55.0], [24.9, 55.0], [25.0, 55.0], [25.1, 55.0], [25.2, 56.0], [25.3, 56.0], [25.4, 56.0], [25.5, 57.0], [25.6, 57.0], [25.7, 57.0], [25.8, 58.0], [25.9, 58.0], [26.0, 58.0], [26.1, 59.0], [26.2, 59.0], [26.3, 59.0], [26.4, 59.0], [26.5, 59.0], [26.6, 60.0], [26.7, 60.0], [26.8, 60.0], [26.9, 60.0], [27.0, 60.0], [27.1, 60.0], [27.2, 60.0], [27.3, 61.0], [27.4, 61.0], [27.5, 61.0], [27.6, 61.0], [27.7, 61.0], [27.8, 61.0], [27.9, 61.0], [28.0, 61.0], [28.1, 61.0], [28.2, 62.0], [28.3, 62.0], [28.4, 62.0], [28.5, 62.0], [28.6, 62.0], [28.7, 63.0], [28.8, 63.0], [28.9, 63.0], [29.0, 63.0], [29.1, 63.0], [29.2, 63.0], [29.3, 64.0], [29.4, 64.0], [29.5, 64.0], [29.6, 64.0], [29.7, 64.0], [29.8, 64.0], [29.9, 64.0], [30.0, 64.0], [30.1, 64.0], [30.2, 64.0], [30.3, 64.0], [30.4, 65.0], [30.5, 65.0], [30.6, 65.0], [30.7, 65.0], [30.8, 65.0], [30.9, 65.0], [31.0, 65.0], [31.1, 65.0], [31.2, 66.0], [31.3, 66.0], [31.4, 66.0], [31.5, 66.0], [31.6, 66.0], [31.7, 66.0], [31.8, 66.0], [31.9, 66.0], [32.0, 67.0], [32.1, 67.0], [32.2, 67.0], [32.3, 67.0], [32.4, 67.0], [32.5, 67.0], [32.6, 67.0], [32.7, 68.0], [32.8, 68.0], [32.9, 68.0], [33.0, 68.0], [33.1, 68.0], [33.2, 68.0], [33.3, 69.0], [33.4, 69.0], [33.5, 69.0], [33.6, 69.0], [33.7, 69.0], [33.8, 69.0], [33.9, 69.0], [34.0, 70.0], [34.1, 70.0], [34.2, 70.0], [34.3, 71.0], [34.4, 71.0], [34.5, 71.0], [34.6, 71.0], [34.7, 71.0], [34.8, 72.0], [34.9, 72.0], [35.0, 72.0], [35.1, 72.0], [35.2, 72.0], [35.3, 72.0], [35.4, 73.0], [35.5, 73.0], [35.6, 73.0], [35.7, 73.0], [35.8, 74.0], [35.9, 74.0], [36.0, 74.0], [36.1, 74.0], [36.2, 74.0], [36.3, 74.0], [36.4, 75.0], [36.5, 75.0], [36.6, 76.0], [36.7, 76.0], [36.8, 76.0], [36.9, 77.0], [37.0, 77.0], [37.1, 77.0], [37.2, 78.0], [37.3, 78.0], [37.4, 78.0], [37.5, 79.0], [37.6, 79.0], [37.7, 80.0], [37.8, 81.0], [37.9, 81.0], [38.0, 81.0], [38.1, 83.0], [38.2, 84.0], [38.3, 84.0], [38.4, 87.0], [38.5, 89.0], [38.6, 91.0], [38.7, 94.0], [38.8, 94.0], [38.9, 96.0], [39.0, 107.0], [39.1, 108.0], [39.2, 108.0], [39.3, 109.0], [39.4, 111.0], [39.5, 118.0], [39.6, 119.0], [39.7, 120.0], [39.8, 125.0], [39.9, 133.0], [40.0, 133.0], [40.1, 138.0], [40.2, 141.0], [40.3, 143.0], [40.4, 145.0], [40.5, 146.0], [40.6, 148.0], [40.7, 149.0], [40.8, 154.0], [40.9, 156.0], [41.0, 158.0], [41.1, 160.0], [41.2, 164.0], [41.3, 168.0], [41.4, 172.0], [41.5, 173.0], [41.6, 182.0], [41.7, 189.0], [41.8, 189.0], [41.9, 195.0], [42.0, 200.0], [42.1, 203.0], [42.2, 204.0], [42.3, 208.0], [42.4, 214.0], [42.5, 216.0], [42.6, 220.0], [42.7, 222.0], [42.8, 230.0], [42.9, 243.0], [43.0, 251.0], [43.1, 252.0], [43.2, 268.0], [43.3, 272.0], [43.4, 275.0], [43.5, 289.0], [43.6, 299.0], [43.7, 308.0], [43.8, 466.0], [43.9, 929.0], [44.0, 934.0], [44.1, 958.0], [44.2, 964.0], [44.3, 973.0], [44.4, 988.0], [44.5, 1014.0], [44.6, 1056.0], [44.7, 1090.0], [44.8, 1135.0], [44.9, 1163.0], [45.0, 1212.0], [45.1, 1230.0], [45.2, 1266.0], [45.3, 1269.0], [45.4, 1296.0], [45.5, 1335.0], [45.6, 1373.0], [45.7, 1384.0], [45.8, 1418.0], [45.9, 1447.0], [46.0, 1516.0], [46.1, 1540.0], [46.2, 1602.0], [46.3, 1661.0], [46.4, 1685.0], [46.5, 1748.0], [46.6, 1794.0], [46.7, 1833.0], [46.8, 1869.0], [46.9, 1920.0], [47.0, 1937.0], [47.1, 1974.0], [47.2, 2001.0], [47.3, 2026.0], [47.4, 2041.0], [47.5, 2089.0], [47.6, 2150.0], [47.7, 2196.0], [47.8, 2234.0], [47.9, 2251.0], [48.0, 2283.0], [48.1, 2313.0], [48.2, 2330.0], [48.3, 2345.0], [48.4, 2380.0], [48.5, 2409.0], [48.6, 2442.0], [48.7, 2458.0], [48.8, 2484.0], [48.9, 2518.0], [49.0, 2546.0], [49.1, 2571.0], [49.2, 2588.0], [49.3, 2618.0], [49.4, 2652.0], [49.5, 2678.0], [49.6, 2696.0], [49.7, 2725.0], [49.8, 2754.0], [49.9, 2775.0], [50.0, 2787.0], [50.1, 2834.0], [50.2, 2865.0], [50.3, 2885.0], [50.4, 2907.0], [50.5, 2923.0], [50.6, 2930.0], [50.7, 2963.0], [50.8, 3001.0], [50.9, 3016.0], [51.0, 3052.0], [51.1, 3080.0], [51.2, 3108.0], [51.3, 3140.0], [51.4, 3158.0], [51.5, 3186.0], [51.6, 3226.0], [51.7, 3297.0], [51.8, 3329.0], [51.9, 3398.0], [52.0, 3465.0], [52.1, 3510.0], [52.2, 3532.0], [52.3, 3593.0], [52.4, 3640.0], [52.5, 3694.0], [52.6, 3723.0], [52.7, 3737.0], [52.8, 3758.0], [52.9, 3768.0], [53.0, 3785.0], [53.1, 3804.0], [53.2, 3829.0], [53.3, 3862.0], [53.4, 3888.0], [53.5, 3900.0], [53.6, 3960.0], [53.7, 4124.0], [53.8, 4138.0], [53.9, 4152.0], [54.0, 4155.0], [54.1, 4182.0], [54.2, 4236.0], [54.3, 4268.0], [54.4, 4285.0], [54.5, 4312.0], [54.6, 4343.0], [54.7, 4375.0], [54.8, 4397.0], [54.9, 4445.0], [55.0, 4511.0], [55.1, 4594.0], [55.2, 4657.0], [55.3, 4696.0], [55.4, 4744.0], [55.5, 4786.0], [55.6, 4824.0], [55.7, 4841.0], [55.8, 4864.0], [55.9, 4892.0], [56.0, 4932.0], [56.1, 4948.0], [56.2, 4996.0], [56.3, 5044.0], [56.4, 5070.0], [56.5, 5103.0], [56.6, 5119.0], [56.7, 5150.0], [56.8, 5191.0], [56.9, 5224.0], [57.0, 5245.0], [57.1, 5296.0], [57.2, 5332.0], [57.3, 5369.0], [57.4, 5382.0], [57.5, 5405.0], [57.6, 5464.0], [57.7, 5506.0], [57.8, 5574.0], [57.9, 5592.0], [58.0, 5634.0], [58.1, 5674.0], [58.2, 5714.0], [58.3, 5735.0], [58.4, 5770.0], [58.5, 5801.0], [58.6, 5831.0], [58.7, 5848.0], [58.8, 5873.0], [58.9, 5992.0], [59.0, 6130.0], [59.1, 6302.0], [59.2, 6414.0], [59.3, 6478.0], [59.4, 6524.0], [59.5, 6565.0], [59.6, 6587.0], [59.7, 6627.0], [59.8, 6658.0], [59.9, 6689.0], [60.0, 6702.0], [60.1, 6726.0], [60.2, 6761.0], [60.3, 6822.0], [60.4, 6854.0], [60.5, 6874.0], [60.6, 6935.0], [60.7, 6966.0], [60.8, 7005.0], [60.9, 7032.0], [61.0, 7083.0], [61.1, 7137.0], [61.2, 7183.0], [61.3, 7213.0], [61.4, 7225.0], [61.5, 7259.0], [61.6, 7295.0], [61.7, 7338.0], [61.8, 7351.0], [61.9, 7375.0], [62.0, 7403.0], [62.1, 7430.0], [62.2, 7447.0], [62.3, 7466.0], [62.4, 7497.0], [62.5, 7526.0], [62.6, 7556.0], [62.7, 7573.0], [62.8, 7605.0], [62.9, 7649.0], [63.0, 7687.0], [63.1, 7702.0], [63.2, 7719.0], [63.3, 7743.0], [63.4, 7770.0], [63.5, 7775.0], [63.6, 7850.0], [63.7, 7900.0], [63.8, 7947.0], [63.9, 7977.0], [64.0, 7990.0], [64.1, 8021.0], [64.2, 8071.0], [64.3, 8095.0], [64.4, 8099.0], [64.5, 8114.0], [64.6, 8139.0], [64.7, 8158.0], [64.8, 8169.0], [64.9, 8190.0], [65.0, 8201.0], [65.1, 8227.0], [65.2, 8254.0], [65.3, 8284.0], [65.4, 8351.0], [65.5, 8390.0], [65.6, 8423.0], [65.7, 8439.0], [65.8, 8477.0], [65.9, 8577.0], [66.0, 8615.0], [66.1, 8631.0], [66.2, 8652.0], [66.3, 8670.0], [66.4, 8703.0], [66.5, 8722.0], [66.6, 8739.0], [66.7, 8745.0], [66.8, 8764.0], [66.9, 8785.0], [67.0, 8803.0], [67.1, 8831.0], [67.2, 8871.0], [67.3, 8903.0], [67.4, 8904.0], [67.5, 8924.0], [67.6, 8944.0], [67.7, 8961.0], [67.8, 8973.0], [67.9, 8977.0], [68.0, 9009.0], [68.1, 9033.0], [68.2, 9060.0], [68.3, 9074.0], [68.4, 9103.0], [68.5, 9134.0], [68.6, 9171.0], [68.7, 9187.0], [68.8, 9215.0], [68.9, 9243.0], [69.0, 9277.0], [69.1, 9301.0], [69.2, 9317.0], [69.3, 9356.0], [69.4, 9399.0], [69.5, 9440.0], [69.6, 9457.0], [69.7, 9492.0], [69.8, 9522.0], [69.9, 9552.0], [70.0, 9573.0], [70.1, 9609.0], [70.2, 9646.0], [70.3, 9685.0], [70.4, 9723.0], [70.5, 9745.0], [70.6, 9785.0], [70.7, 9823.0], [70.8, 9864.0], [70.9, 9884.0], [71.0, 9921.0], [71.1, 9955.0], [71.2, 9989.0], [71.3, 10029.0], [71.4, 10050.0], [71.5, 10079.0], [71.6, 10113.0], [71.7, 10338.0], [71.8, 10349.0], [71.9, 10367.0], [72.0, 10393.0], [72.1, 10409.0], [72.2, 10412.0], [72.3, 10430.0], [72.4, 10469.0], [72.5, 10487.0], [72.6, 10542.0], [72.7, 10558.0], [72.8, 10594.0], [72.9, 10636.0], [73.0, 10671.0], [73.1, 10690.0], [73.2, 10725.0], [73.3, 10757.0], [73.4, 10773.0], [73.5, 10806.0], [73.6, 10843.0], [73.7, 10872.0], [73.8, 10908.0], [73.9, 10951.0], [74.0, 10970.0], [74.1, 11007.0], [74.2, 11039.0], [74.3, 11070.0], [74.4, 11088.0], [74.5, 11124.0], [74.6, 11139.0], [74.7, 11182.0], [74.8, 11184.0], [74.9, 11231.0], [75.0, 11266.0], [75.1, 11286.0], [75.2, 11319.0], [75.3, 11339.0], [75.4, 11368.0], [75.5, 11393.0], [75.6, 11429.0], [75.7, 11439.0], [75.8, 11487.0], [75.9, 11527.0], [76.0, 11569.0], [76.1, 11603.0], [76.2, 11659.0], [76.3, 11809.0], [76.4, 12030.0], [76.5, 12165.0], [76.6, 12166.0], [76.7, 12247.0], [76.8, 12301.0], [76.9, 12350.0], [77.0, 12363.0], [77.1, 12399.0], [77.2, 12429.0], [77.3, 12465.0], [77.4, 12483.0], [77.5, 12521.0], [77.6, 12587.0], [77.7, 12631.0], [77.8, 12695.0], [77.9, 12720.0], [78.0, 12755.0], [78.1, 12789.0], [78.2, 12822.0], [78.3, 12835.0], [78.4, 12868.0], [78.5, 12898.0], [78.6, 12926.0], [78.7, 12940.0], [78.8, 12969.0], [78.9, 13001.0], [79.0, 13058.0], [79.1, 13093.0], [79.2, 13135.0], [79.3, 13188.0], [79.4, 13241.0], [79.5, 13275.0], [79.6, 13291.0], [79.7, 13342.0], [79.8, 13394.0], [79.9, 13442.0], [80.0, 13466.0], [80.1, 13505.0], [80.2, 13534.0], [80.3, 13578.0], [80.4, 13628.0], [80.5, 13653.0], [80.6, 13702.0], [80.7, 13756.0], [80.8, 13795.0], [80.9, 13813.0], [81.0, 13842.0], [81.1, 13868.0], [81.2, 13900.0], [81.3, 13930.0], [81.4, 13948.0], [81.5, 13984.0], [81.6, 14014.0], [81.7, 14056.0], [81.8, 14071.0], [81.9, 14099.0], [82.0, 14130.0], [82.1, 14159.0], [82.2, 14171.0], [82.3, 14201.0], [82.4, 14231.0], [82.5, 14264.0], [82.6, 14293.0], [82.7, 14309.0], [82.8, 14341.0], [82.9, 14371.0], [83.0, 14400.0], [83.1, 14414.0], [83.2, 14442.0], [83.3, 14472.0], [83.4, 14502.0], [83.5, 14519.0], [83.6, 14552.0], [83.7, 14593.0], [83.8, 14639.0], [83.9, 14675.0], [84.0, 14711.0], [84.1, 14750.0], [84.2, 14781.0], [84.3, 14815.0], [84.4, 14830.0], [84.5, 14868.0], [84.6, 14901.0], [84.7, 14931.0], [84.8, 14958.0], [84.9, 14992.0], [85.0, 15029.0], [85.1, 15066.0], [85.2, 15101.0], [85.3, 15120.0], [85.4, 15136.0], [85.5, 15173.0], [85.6, 15213.0], [85.7, 15228.0], [85.8, 15263.0], [85.9, 15300.0], [86.0, 15316.0], [86.1, 15343.0], [86.2, 15375.0], [86.3, 15392.0], [86.4, 15437.0], [86.5, 15625.0], [86.6, 15695.0], [86.7, 15807.0], [86.8, 15881.0], [86.9, 15924.0], [87.0, 15944.0], [87.1, 15972.0], [87.2, 16001.0], [87.3, 16029.0], [87.4, 16044.0], [87.5, 16076.0], [87.6, 16105.0], [87.7, 16135.0], [87.8, 16168.0], [87.9, 16183.0], [88.0, 16239.0], [88.1, 16280.0], [88.2, 16331.0], [88.3, 16348.0], [88.4, 16378.0], [88.5, 16435.0], [88.6, 16471.0], [88.7, 16496.0], [88.8, 16529.0], [88.9, 16568.0], [89.0, 16608.0], [89.1, 16635.0], [89.2, 16671.0], [89.3, 16706.0], [89.4, 16750.0], [89.5, 16785.0], [89.6, 16801.0], [89.7, 16836.0], [89.8, 16870.0], [89.9, 16905.0], [90.0, 16919.0], [90.1, 16952.0], [90.2, 16990.0], [90.3, 17020.0], [90.4, 17050.0], [90.5, 17065.0], [90.6, 17098.0], [90.7, 17292.0], [90.8, 17423.0], [90.9, 17491.0], [91.0, 17547.0], [91.1, 17585.0], [91.2, 17625.0], [91.3, 17664.0], [91.4, 17687.0], [91.5, 17727.0], [91.6, 17766.0], [91.7, 17810.0], [91.8, 17828.0], [91.9, 17853.0], [92.0, 17891.0], [92.1, 17931.0], [92.2, 17951.0], [92.3, 17990.0], [92.4, 18022.0], [92.5, 18051.0], [92.6, 18080.0], [92.7, 18098.0], [92.8, 18125.0], [92.9, 18159.0], [93.0, 18193.0], [93.1, 18211.0], [93.2, 18269.0], [93.3, 18336.0], [93.4, 18395.0], [93.5, 18424.0], [93.6, 18451.0], [93.7, 18480.0], [93.8, 18504.0], [93.9, 18511.0], [94.0, 18517.0], [94.1, 18556.0], [94.2, 18586.0], [94.3, 18613.0], [94.4, 18628.0], [94.5, 18658.0], [94.6, 18691.0], [94.7, 18717.0], [94.8, 18735.0], [94.9, 18762.0], [95.0, 18790.0], [95.1, 18828.0], [95.2, 18869.0], [95.3, 18886.0], [95.4, 18930.0], [95.5, 18970.0], [95.6, 18986.0], [95.7, 18987.0], [95.8, 19004.0], [95.9, 19016.0], [96.0, 19024.0], [96.1, 19039.0], [96.2, 19053.0], [96.3, 19068.0], [96.4, 19084.0], [96.5, 19101.0], [96.6, 19115.0], [96.7, 19134.0], [96.8, 19152.0], [96.9, 19171.0], [97.0, 19175.0], [97.1, 19195.0], [97.2, 19212.0], [97.3, 19230.0], [97.4, 19238.0], [97.5, 19260.0], [97.6, 19276.0], [97.7, 19294.0], [97.8, 19320.0], [97.9, 19322.0], [98.0, 19348.0], [98.1, 19372.0], [98.2, 19383.0], [98.3, 19407.0], [98.4, 19432.0], [98.5, 19449.0], [98.6, 19477.0], [98.7, 19479.0], [98.8, 19510.0], [98.9, 19533.0], [99.0, 19553.0], [99.1, 19596.0], [99.2, 19614.0], [99.3, 19639.0], [99.4, 19682.0], [99.5, 19711.0], [99.6, 19730.0], [99.7, 19744.0], [99.8, 19813.0], [99.9, 19981.0], [100.0, 20063.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 689.0, "series": [{"data": [[0.0, 689.0], [100.0, 54.0], [200.0, 29.0], [300.0, 3.0], [400.0, 1.0], [900.0, 10.0], [1000.0, 6.0], [1100.0, 3.0], [1200.0, 9.0], [1300.0, 6.0], [1400.0, 4.0], [1500.0, 3.0], [1600.0, 5.0], [1700.0, 3.0], [1800.0, 5.0], [1900.0, 5.0], [2000.0, 6.0], [2100.0, 4.0], [2200.0, 6.0], [2300.0, 7.0], [2400.0, 7.0], [2500.0, 6.0], [2600.0, 7.0], [2700.0, 7.0], [2800.0, 7.0], [2900.0, 7.0], [3000.0, 7.0], [3100.0, 7.0], [3200.0, 3.0], [3300.0, 3.0], [3400.0, 3.0], [3500.0, 4.0], [3600.0, 4.0], [3700.0, 9.0], [3800.0, 7.0], [3900.0, 3.0], [4100.0, 10.0], [4200.0, 5.0], [4300.0, 6.0], [4400.0, 3.0], [4500.0, 3.0], [4600.0, 3.0], [4700.0, 4.0], [4800.0, 7.0], [4900.0, 5.0], [5000.0, 5.0], [5100.0, 6.0], [5200.0, 5.0], [5300.0, 6.0], [5400.0, 4.0], [5500.0, 4.0], [5600.0, 5.0], [5700.0, 5.0], [5800.0, 7.0], [5900.0, 1.0], [6000.0, 1.0], [6100.0, 1.0], [6200.0, 1.0], [6300.0, 1.0], [6400.0, 3.0], [6500.0, 5.0], [6600.0, 6.0], [6700.0, 6.0], [6800.0, 4.0], [6900.0, 5.0], [7000.0, 4.0], [7100.0, 5.0], [7200.0, 6.0], [7300.0, 6.0], [7400.0, 8.0], [7500.0, 6.0], [7600.0, 5.0], [7700.0, 8.0], [7800.0, 3.0], [7900.0, 6.0], [8000.0, 7.0], [8100.0, 10.0], [8200.0, 6.0], [8300.0, 4.0], [8400.0, 5.0], [8500.0, 2.0], [8600.0, 8.0], [8700.0, 10.0], [8800.0, 6.0], [8900.0, 12.0], [9000.0, 7.0], [9100.0, 6.0], [9200.0, 7.0], [9300.0, 6.0], [9400.0, 5.0], [9500.0, 6.0], [9600.0, 5.0], [9700.0, 5.0], [9800.0, 5.0], [9900.0, 6.0], [10000.0, 6.0], [10100.0, 1.0], [10400.0, 8.0], [10300.0, 8.0], [10500.0, 5.0], [10600.0, 5.0], [10700.0, 6.0], [10800.0, 6.0], [10900.0, 5.0], [11000.0, 6.0], [11100.0, 7.0], [11200.0, 6.0], [11300.0, 7.0], [11400.0, 5.0], [11500.0, 4.0], [11600.0, 3.0], [11700.0, 1.0], [11800.0, 1.0], [11900.0, 1.0], [12000.0, 2.0], [12100.0, 3.0], [12200.0, 2.0], [12300.0, 6.0], [12400.0, 5.0], [12500.0, 4.0], [12600.0, 4.0], [12700.0, 5.0], [12800.0, 7.0], [12900.0, 6.0], [13000.0, 5.0], [13100.0, 3.0], [13200.0, 5.0], [13300.0, 4.0], [13400.0, 4.0], [13500.0, 5.0], [13600.0, 4.0], [13700.0, 5.0], [13800.0, 6.0], [13900.0, 7.0], [14000.0, 6.0], [14100.0, 6.0], [14200.0, 7.0], [14300.0, 6.0], [14400.0, 7.0], [14500.0, 6.0], [14600.0, 4.0], [14700.0, 6.0], [14800.0, 5.0], [14900.0, 6.0], [15000.0, 5.0], [15100.0, 7.0], [15200.0, 5.0], [15300.0, 8.0], [15400.0, 2.0], [15500.0, 1.0], [15600.0, 2.0], [15700.0, 1.0], [15800.0, 4.0], [15900.0, 5.0], [16000.0, 7.0], [16100.0, 6.0], [16200.0, 5.0], [16300.0, 5.0], [17200.0, 2.0], [16400.0, 4.0], [16600.0, 5.0], [16800.0, 6.0], [17000.0, 7.0], [17400.0, 2.0], [18200.0, 3.0], [17600.0, 5.0], [17800.0, 6.0], [18000.0, 7.0], [18400.0, 6.0], [19200.0, 11.0], [18600.0, 7.0], [18800.0, 5.0], [19000.0, 14.0], [19400.0, 9.0], [19600.0, 6.0], [19800.0, 1.0], [20000.0, 1.0], [16500.0, 5.0], [16700.0, 5.0], [16900.0, 6.0], [17300.0, 1.0], [17500.0, 4.0], [17700.0, 5.0], [17900.0, 5.0], [18100.0, 6.0], [18300.0, 4.0], [18500.0, 8.0], [18700.0, 7.0], [18900.0, 7.0], [19100.0, 11.0], [19300.0, 9.0], [19500.0, 7.0], [19700.0, 5.0], [19900.0, 2.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 20000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 38.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 956.0, "series": [{"data": [[0.0, 776.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 38.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 956.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.63333716E12, "maxY": 301.62937062937067, "series": [{"data": [[1.63333728E12, 1.0], [1.63333722E12, 1.0]], "isOverall": false, "label": "[network\/2] standard test - 1:5", "isController": false}, {"data": [[1.63333728E12, 167.42456140350876], [1.63333734E12, 301.62937062937067]], "isOverall": false, "label": "[network\/2] standard test - 1:50", "isController": false}, {"data": [[1.63333722E12, 1.0]], "isOverall": false, "label": "[network\/2] standard test - 1:1", "isController": false}, {"data": [[1.63333716E12, 1.0], [1.63333722E12, 1.0]], "isOverall": false, "label": "[network\/2] standard test - 2:1", "isController": false}, {"data": [[1.63333722E12, 1.0]], "isOverall": false, "label": "[network\/2] standard test - 1:2", "isController": false}, {"data": [[1.63333728E12, 1.0499999999999992]], "isOverall": false, "label": "[network\/2] standard test - 1:10", "isController": false}, {"data": [[1.63333728E12, 1.695]], "isOverall": false, "label": "[network\/2] standard test - 1:20", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63333734E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 81.62945736434108, "minX": 1.0, "maxY": 19766.0, "series": [{"data": [[2.0, 458.37254901960785], [3.0, 792.2666666666667], [4.0, 977.2916666666666], [5.0, 1516.7333333333333], [6.0, 2421.0], [7.0, 5113.0], [8.0, 19518.0], [9.0, 19766.0], [10.0, 9966.5], [11.0, 19730.0], [12.0, 19711.0], [13.0, 9970.0], [14.0, 19682.0], [15.0, 9978.5], [16.0, 19635.0], [17.0, 19614.0], [18.0, 9977.0], [19.0, 19571.0], [20.0, 19553.0], [21.0, 19533.0], [22.0, 19510.0], [23.0, 9972.5], [24.0, 19449.0], [25.0, 19432.0], [26.0, 19380.0], [27.0, 19348.0], [28.0, 19320.0], [29.0, 19294.0], [30.0, 19271.0], [31.0, 19249.0], [33.0, 19212.0], [32.0, 19230.0], [35.0, 19175.0], [34.0, 19195.0], [37.0, 19139.0], [36.0, 19156.0], [38.0, 10063.5], [39.0, 19101.0], [41.0, 10013.0], [40.0, 19084.0], [43.0, 6988.0], [42.0, 19053.0], [45.0, 7005.333333333333], [44.0, 19023.0], [46.0, 5449.75], [47.0, 18970.0], [49.0, 10231.0], [48.0, 19008.0], [51.0, 10236.5], [50.0, 19477.0], [53.0, 10241.0], [52.0, 19442.0], [55.0, 19383.0], [54.0, 19407.0], [57.0, 19355.0], [56.0, 19372.0], [58.0, 10246.0], [59.0, 19322.0], [60.0, 10238.0], [61.0, 19294.0], [62.0, 7239.333333333333], [63.0, 10263.0], [64.0, 10229.0], [66.0, 10239.0], [67.0, 10242.5], [65.0, 19226.0], [68.0, 10253.0], [69.0, 10262.5], [70.0, 10263.0], [71.0, 7320.333333333333], [72.0, 10023.5], [73.0, 10032.5], [75.0, 10039.5], [74.0, 19058.0], [76.0, 10057.0], [78.0, 10068.5], [79.0, 10331.5], [77.0, 19016.0], [80.0, 10088.0], [81.0, 7161.333333333333], [82.0, 10126.5], [83.0, 7212.666666666667], [85.0, 10158.0], [86.0, 10166.5], [87.0, 7294.666666666667], [84.0, 18886.0], [88.0, 7328.0], [89.0, 7361.0], [90.0, 7392.333333333333], [91.0, 6032.25], [92.0, 7480.666666666667], [93.0, 6104.25], [94.0, 10327.0], [95.0, 10330.0], [96.0, 10332.5], [97.0, 7552.666666666667], [98.0, 6192.5], [99.0, 10334.5], [100.0, 10358.5], [101.0, 10367.5], [102.0, 10375.0], [103.0, 10372.0], [105.0, 10376.0], [106.0, 10374.0], [107.0, 6317.25], [104.0, 18574.0], [108.0, 10393.5], [110.0, 10403.0], [111.0, 7709.666666666667], [109.0, 18511.0], [112.0, 10405.0], [113.0, 10405.5], [114.0, 10408.5], [115.0, 7737.333333333333], [116.0, 10416.5], [117.0, 10411.5], [118.0, 10409.5], [119.0, 10397.0], [120.0, 7753.666666666667], [121.0, 10383.0], [122.0, 10378.5], [123.0, 7763.333333333333], [124.0, 10374.5], [125.0, 10372.5], [126.0, 10373.5], [127.0, 10372.5], [128.0, 10371.5], [129.0, 7799.666666666667], [130.0, 10381.0], [131.0, 10379.0], [132.0, 10381.0], [133.0, 7829.0], [134.0, 7848.333333333333], [135.0, 6584.5], [136.0, 10405.5], [139.0, 10392.5], [140.0, 10392.0], [141.0, 7886.333333333333], [142.0, 7884.0], [143.0, 10389.0], [138.0, 17969.0], [137.0, 17990.0], [144.0, 10388.0], [145.0, 10384.0], [146.0, 7899.666666666667], [147.0, 10386.5], [148.0, 10387.0], [149.0, 3008.5], [150.0, 3034.0], [151.0, 3052.0], [152.0, 3062.0], [153.0, 3080.0], [154.0, 3090.0], [155.0, 3108.0], [156.0, 14783.099999999999], [157.0, 10380.5], [158.0, 10378.0], [159.0, 10376.0], [160.0, 10372.0], [161.0, 10376.5], [162.0, 10373.0], [164.0, 10335.5], [166.0, 10275.5], [167.0, 10226.5], [165.0, 17292.0], [163.0, 17423.0], [170.0, 10224.0], [171.0, 10235.0], [173.0, 10235.5], [174.0, 10240.0], [175.0, 10241.0], [172.0, 17020.0], [169.0, 17065.0], [168.0, 17080.0], [176.0, 10242.0], [178.0, 10243.5], [179.0, 10249.0], [180.0, 10252.5], [182.0, 10246.5], [183.0, 10252.5], [181.0, 16870.0], [177.0, 16936.0], [185.0, 10247.5], [186.0, 8077.0], [187.0, 7003.25], [188.0, 10265.5], [189.0, 10241.5], [190.0, 10235.5], [191.0, 8092.333333333333], [184.0, 16821.0], [192.0, 10243.0], [193.0, 10232.0], [194.0, 10234.5], [195.0, 8115.333333333333], [196.0, 10238.5], [197.0, 10234.0], [198.0, 10234.0], [199.0, 10244.5], [200.0, 10331.0], [204.0, 10267.5], [203.0, 10287.5], [206.0, 10266.5], [207.0, 10250.5], [205.0, 16398.0], [202.0, 16471.0], [201.0, 16496.0], [208.0, 10240.5], [209.0, 10241.5], [211.0, 10224.0], [212.0, 8214.0], [213.0, 8242.666666666666], [214.0, 8251.666666666666], [215.0, 6710.8], [210.0, 16298.0], [216.0, 7301.5], [217.0, 10287.5], [219.0, 10282.0], [220.0, 10288.5], [222.0, 7449.75], [223.0, 10307.5], [221.0, 16090.0], [218.0, 16135.0], [224.0, 10350.5], [226.0, 10355.5], [228.0, 8486.333333333334], [229.0, 10368.5], [231.0, 10365.0], [230.0, 15958.0], [227.0, 16001.0], [225.0, 16029.0], [232.0, 10366.0], [233.0, 8521.0], [234.0, 10368.5], [235.0, 8533.0], [236.0, 10349.5], [237.0, 10337.5], [238.0, 10313.5], [239.0, 10286.5], [240.0, 10258.0], [241.0, 10216.5], [243.0, 10203.0], [244.0, 10218.0], [245.0, 8501.0], [246.0, 10221.0], [247.0, 10223.0], [242.0, 15410.0], [248.0, 8523.333333333334], [249.0, 10232.5], [250.0, 10234.0], [251.0, 10236.0], [252.0, 10232.5], [253.0, 10234.5], [254.0, 10236.5], [255.0, 10241.5], [258.0, 8595.333333333334], [257.0, 10234.5], [259.0, 10236.5], [268.0, 10240.5], [269.0, 10240.0], [270.0, 10248.0], [271.0, 10252.5], [261.0, 10244.5], [260.0, 15136.0], [262.0, 10243.0], [263.0, 10233.0], [256.0, 15197.0], [264.0, 10235.5], [265.0, 10241.5], [267.0, 10236.5], [266.0, 15029.0], [285.0, 10261.5], [272.0, 10246.5], [273.0, 8716.333333333334], [274.0, 14886.0], [284.0, 14711.0], [275.0, 14868.0], [286.0, 10259.5], [287.0, 8799.0], [276.0, 7969.0], [277.0, 14830.0], [278.0, 10264.5], [279.0, 10266.0], [280.0, 10265.0], [281.0, 10269.0], [282.0, 10268.5], [283.0, 8043.25], [302.0, 14385.0], [296.0, 10265.0], [292.0, 10263.0], [293.0, 14519.0], [295.0, 14488.0], [289.0, 14593.0], [288.0, 14613.0], [291.0, 14552.0], [290.0, 14572.0], [294.0, 14502.0], [299.0, 10278.5], [303.0, 14371.0], [301.0, 14400.0], [300.0, 14414.0], [298.0, 14442.0], [297.0, 14456.0], [318.0, 10310.0], [305.0, 10299.0], [309.0, 10291.0], [308.0, 14293.0], [311.0, 14250.0], [304.0, 14356.0], [310.0, 14264.0], [314.0, 10307.5], [316.0, 10308.5], [307.0, 14309.0], [306.0, 14323.0], [319.0, 10317.5], [317.0, 14159.0], [315.0, 14181.0], [313.0, 14216.0], [312.0, 14231.0], [321.0, 10323.0], [320.0, 10318.5], [322.0, 10324.5], [323.0, 10329.0], [324.0, 10333.0], [325.0, 10333.0], [326.0, 10328.0], [327.0, 10321.0], [328.0, 9116.666666666666], [335.0, 10345.0], [334.0, 13885.0], [332.0, 9140.666666666666], [333.0, 10339.5], [329.0, 10333.5], [330.0, 10333.0], [331.0, 10328.0], [337.0, 10348.0], [336.0, 10346.5], [338.0, 10350.5], [339.0, 13813.0], [348.0, 10331.0], [349.0, 10330.5], [351.0, 10323.0], [350.0, 13552.0], [341.0, 9210.333333333334], [340.0, 13795.0], [342.0, 10353.0], [343.0, 10349.0], [344.0, 10340.0], [345.0, 10342.0], [347.0, 10330.0], [346.0, 13653.0], [353.0, 10333.0], [352.0, 10328.5], [355.0, 9282.333333333334], [354.0, 13490.0], [364.0, 9324.666666666666], [365.0, 10308.0], [366.0, 9336.0], [367.0, 10302.0], [356.0, 10327.5], [357.0, 9294.333333333334], [359.0, 9301.666666666666], [358.0, 13394.0], [360.0, 10318.5], [362.0, 10309.0], [361.0, 13316.0], [363.0, 10306.5], [369.0, 9346.0], [368.0, 10297.5], [370.0, 10279.5], [371.0, 9358.0], [372.0, 10287.0], [373.0, 10280.0], [374.0, 10271.0], [375.0, 10269.5], [376.0, 10271.0], [383.0, 10290.5], [382.0, 12881.0], [380.0, 10291.0], [381.0, 9001.5], [377.0, 9382.666666666666], [378.0, 10279.0], [379.0, 10287.5], [387.0, 10290.0], [385.0, 9443.0], [384.0, 10289.5], [386.0, 10296.0], [388.0, 10309.5], [390.0, 12755.0], [389.0, 12774.0], [391.0, 10285.5], [392.0, 10298.5], [398.0, 10273.5], [399.0, 10262.0], [396.0, 9510.666666666666], [397.0, 10274.0], [393.0, 10297.5], [395.0, 10285.0], [394.0, 12658.0], [401.0, 10265.0], [400.0, 10262.0], [402.0, 10268.0], [403.0, 12446.0], [412.0, 10172.0], [413.0, 9497.0], [414.0, 10184.0], [415.0, 10181.5], [404.0, 9541.0], [405.0, 9552.666666666666], [406.0, 10271.5], [407.0, 10270.5], [408.0, 10268.5], [409.0, 9580.333333333334], [410.0, 10273.0], [411.0, 10264.0], [417.0, 10177.5], [416.0, 9549.333333333334], [418.0, 9565.0], [419.0, 10159.0], [420.0, 10099.5], [421.0, 10066.5], [422.0, 10041.0], [423.0, 9507.0], [425.0, 10023.0], [429.0, 10032.0], [428.0, 11527.0], [431.0, 9548.0], [424.0, 11603.0], [430.0, 11469.0], [427.0, 10012.0], [426.0, 11538.0], [433.0, 10033.0], [432.0, 10035.0], [434.0, 9567.0], [435.0, 10030.5], [436.0, 10028.5], [437.0, 10028.5], [438.0, 10024.0], [439.0, 10020.5], [440.0, 9597.333333333334], [447.0, 9999.5], [444.0, 10007.5], [445.0, 11231.0], [446.0, 9600.333333333334], [441.0, 10028.5], [442.0, 10014.0], [443.0, 10005.5], [449.0, 10008.5], [448.0, 10007.5], [450.0, 10003.0], [451.0, 10015.5], [452.0, 10014.0], [453.0, 10015.0], [454.0, 10017.5], [455.0, 11070.0], [457.0, 10000.0], [460.0, 9988.5], [461.0, 9597.0], [462.0, 9352.2], [463.0, 9968.5], [456.0, 11053.0], [459.0, 9990.0], [458.0, 11023.0], [465.0, 9652.0], [464.0, 9962.5], [466.0, 9669.0], [467.0, 9973.0], [468.0, 9688.333333333334], [469.0, 9980.5], [470.0, 9976.0], [471.0, 9971.0], [472.0, 9980.0], [478.0, 9885.25], [479.0, 9884.75], [476.0, 9883.25], [477.0, 9764.4], [473.0, 9978.5], [474.0, 9886.5], [475.0, 9755.0], [481.0, 9884.75], [480.0, 9884.5], [482.0, 9884.25], [483.0, 9883.0], [484.0, 9885.0], [485.0, 9747.75], [486.0, 9886.25], [487.0, 9882.25], [488.0, 10014.333333333334], [494.0, 10358.0], [495.0, 10364.0], [492.0, 10255.5], [493.0, 10253.0], [489.0, 10265.0], [490.0, 10264.5], [491.0, 10430.0], [496.0, 10358.0], [498.0, 10395.0], [497.0, 10420.0], [1.0, 81.62945736434108]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[149.4005649717515, 5945.72655367232]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 498.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 10.25, "minX": 1.63333716E12, "maxY": 2.110516105E7, "series": [{"data": [[1.63333728E12, 2.110516105E7], [1.63333716E12, 114205.41666666667], [1.63333734E12, 1.63313675E7], [1.63333722E12, 2877976.5833333335]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63333728E12, 1894.2], [1.63333716E12, 10.25], [1.63333734E12, 1465.75], [1.63333722E12, 258.3]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63333734E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 67.15873015873015, "minX": 1.63333716E12, "maxY": 13297.262937062935, "series": [{"data": [[1.63333728E12, 1090.4426406926414], [1.63333716E12, 72.4], [1.63333734E12, 13297.262937062935], [1.63333722E12, 67.15873015873015]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63333734E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 11.29365079365079, "minX": 1.63333716E12, "maxY": 13259.21398601399, "series": [{"data": [[1.63333728E12, 1048.1028138528143], [1.63333716E12, 23.8], [1.63333734E12, 13259.21398601399], [1.63333722E12, 11.29365079365079]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63333734E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1.80699300699301, "minX": 1.63333716E12, "maxY": 13.200000000000001, "series": [{"data": [[1.63333728E12, 2.490259740259739], [1.63333716E12, 13.200000000000001], [1.63333734E12, 1.80699300699301], [1.63333722E12, 3.404761904761906]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63333734E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 35.0, "minX": 1.63333716E12, "maxY": 20063.0, "series": [{"data": [[1.63333728E12, 6587.0], [1.63333716E12, 109.0], [1.63333734E12, 20063.0], [1.63333722E12, 264.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63333728E12, 35.0], [1.63333716E12, 55.0], [1.63333734E12, 6610.0], [1.63333722E12, 37.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63333728E12, 4290.0], [1.63333716E12, 109.0], [1.63333734E12, 19023.4], [1.63333722E12, 77.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.63333728E12, 6290.75], [1.63333716E12, 109.0], [1.63333734E12, 19736.72], [1.63333722E12, 247.80000000000024]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63333728E12, 5263.75], [1.63333716E12, 109.0], [1.63333734E12, 19349.399999999998], [1.63333722E12, 90.29999999999998]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63333734E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 38.0, "minX": 1.0, "maxY": 11519.5, "series": [{"data": [[2.0, 67.0], [8.0, 47.5], [9.0, 53.0], [10.0, 53.0], [11.0, 45.5], [3.0, 70.5], [12.0, 67.5], [14.0, 959.5], [15.0, 9078.0], [1.0, 67.0], [16.0, 46.0], [17.0, 40.0], [19.0, 38.0], [5.0, 64.0], [20.0, 38.0], [21.0, 43.0], [22.0, 67.0], [23.0, 2281.5], [24.0, 10440.0], [25.0, 6236.5], [26.0, 11329.0], [27.0, 10873.0], [28.0, 11519.5], [29.0, 2696.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 29.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 4.0, "minX": 1.0, "maxY": 11482.5, "series": [{"data": [[2.0, 10.0], [8.0, 4.0], [9.0, 6.5], [10.0, 5.0], [11.0, 4.5], [3.0, 14.5], [12.0, 7.0], [14.0, 917.5], [15.0, 9043.0], [1.0, 10.0], [16.0, 4.5], [17.0, 4.0], [19.0, 4.0], [5.0, 9.0], [20.0, 4.0], [21.0, 4.0], [22.0, 30.5], [23.0, 2244.5], [24.0, 10411.5], [25.0, 6198.0], [26.0, 11294.5], [27.0, 10840.0], [28.0, 11482.5], [29.0, 2663.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 29.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.63333716E12, "maxY": 20.75, "series": [{"data": [[1.63333728E12, 20.75], [1.63333716E12, 0.08333333333333333], [1.63333734E12, 6.55], [1.63333722E12, 2.1166666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63333734E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.63333716E12, "maxY": 15.4, "series": [{"data": [[1.63333728E12, 15.4], [1.63333716E12, 0.08333333333333333], [1.63333734E12, 11.916666666666666], [1.63333722E12, 2.1]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63333734E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.63333716E12, "maxY": 15.4, "series": [{"data": [[1.63333728E12, 15.4], [1.63333716E12, 0.08333333333333333], [1.63333734E12, 11.916666666666666], [1.63333722E12, 2.1]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63333734E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.63333716E12, "maxY": 15.4, "series": [{"data": [[1.63333728E12, 15.4], [1.63333716E12, 0.08333333333333333], [1.63333734E12, 11.916666666666666], [1.63333722E12, 2.1]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63333734E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

