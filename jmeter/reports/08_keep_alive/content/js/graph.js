/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 36.0, "minX": 0.0, "maxY": 19118.0, "series": [{"data": [[0.0, 36.0], [0.1, 36.0], [0.2, 36.0], [0.3, 36.0], [0.4, 36.0], [0.5, 36.0], [0.6, 36.0], [0.7, 36.0], [0.8, 36.0], [0.9, 36.0], [1.0, 36.0], [1.1, 36.0], [1.2, 36.0], [1.3, 36.0], [1.4, 36.0], [1.5, 36.0], [1.6, 36.0], [1.7, 36.0], [1.8, 36.0], [1.9, 36.0], [2.0, 36.0], [2.1, 36.0], [2.2, 36.0], [2.3, 36.0], [2.4, 36.0], [2.5, 36.0], [2.6, 36.0], [2.7, 36.0], [2.8, 36.0], [2.9, 36.0], [3.0, 36.0], [3.1, 36.0], [3.2, 36.0], [3.3, 36.0], [3.4, 36.0], [3.5, 36.0], [3.6, 36.0], [3.7, 36.0], [3.8, 36.0], [3.9, 36.0], [4.0, 36.0], [4.1, 36.0], [4.2, 36.0], [4.3, 36.0], [4.4, 36.0], [4.5, 36.0], [4.6, 36.0], [4.7, 36.0], [4.8, 36.0], [4.9, 36.0], [5.0, 36.0], [5.1, 36.0], [5.2, 36.0], [5.3, 36.0], [5.4, 36.0], [5.5, 36.0], [5.6, 36.0], [5.7, 36.0], [5.8, 36.0], [5.9, 36.0], [6.0, 36.0], [6.1, 36.0], [6.2, 36.0], [6.3, 36.0], [6.4, 37.0], [6.5, 37.0], [6.6, 37.0], [6.7, 37.0], [6.8, 37.0], [6.9, 37.0], [7.0, 37.0], [7.1, 37.0], [7.2, 37.0], [7.3, 37.0], [7.4, 37.0], [7.5, 37.0], [7.6, 37.0], [7.7, 37.0], [7.8, 37.0], [7.9, 37.0], [8.0, 37.0], [8.1, 37.0], [8.2, 37.0], [8.3, 37.0], [8.4, 37.0], [8.5, 37.0], [8.6, 37.0], [8.7, 37.0], [8.8, 37.0], [8.9, 37.0], [9.0, 37.0], [9.1, 37.0], [9.2, 37.0], [9.3, 37.0], [9.4, 37.0], [9.5, 37.0], [9.6, 37.0], [9.7, 37.0], [9.8, 37.0], [9.9, 37.0], [10.0, 37.0], [10.1, 37.0], [10.2, 37.0], [10.3, 37.0], [10.4, 37.0], [10.5, 37.0], [10.6, 37.0], [10.7, 37.0], [10.8, 37.0], [10.9, 37.0], [11.0, 37.0], [11.1, 37.0], [11.2, 37.0], [11.3, 37.0], [11.4, 37.0], [11.5, 37.0], [11.6, 37.0], [11.7, 37.0], [11.8, 37.0], [11.9, 37.0], [12.0, 37.0], [12.1, 37.0], [12.2, 37.0], [12.3, 37.0], [12.4, 37.0], [12.5, 37.0], [12.6, 37.0], [12.7, 37.0], [12.8, 37.0], [12.9, 37.0], [13.0, 37.0], [13.1, 37.0], [13.2, 37.0], [13.3, 37.0], [13.4, 37.0], [13.5, 37.0], [13.6, 37.0], [13.7, 37.0], [13.8, 37.0], [13.9, 37.0], [14.0, 37.0], [14.1, 37.0], [14.2, 37.0], [14.3, 37.0], [14.4, 37.0], [14.5, 37.0], [14.6, 37.0], [14.7, 38.0], [14.8, 38.0], [14.9, 38.0], [15.0, 38.0], [15.1, 38.0], [15.2, 38.0], [15.3, 38.0], [15.4, 38.0], [15.5, 38.0], [15.6, 38.0], [15.7, 38.0], [15.8, 38.0], [15.9, 38.0], [16.0, 38.0], [16.1, 38.0], [16.2, 38.0], [16.3, 38.0], [16.4, 38.0], [16.5, 38.0], [16.6, 38.0], [16.7, 38.0], [16.8, 38.0], [16.9, 38.0], [17.0, 38.0], [17.1, 38.0], [17.2, 38.0], [17.3, 38.0], [17.4, 38.0], [17.5, 38.0], [17.6, 38.0], [17.7, 38.0], [17.8, 38.0], [17.9, 38.0], [18.0, 38.0], [18.1, 38.0], [18.2, 38.0], [18.3, 38.0], [18.4, 38.0], [18.5, 39.0], [18.6, 39.0], [18.7, 39.0], [18.8, 39.0], [18.9, 39.0], [19.0, 39.0], [19.1, 39.0], [19.2, 39.0], [19.3, 39.0], [19.4, 39.0], [19.5, 39.0], [19.6, 39.0], [19.7, 39.0], [19.8, 39.0], [19.9, 39.0], [20.0, 39.0], [20.1, 39.0], [20.2, 39.0], [20.3, 39.0], [20.4, 39.0], [20.5, 39.0], [20.6, 40.0], [20.7, 40.0], [20.8, 40.0], [20.9, 40.0], [21.0, 40.0], [21.1, 40.0], [21.2, 40.0], [21.3, 40.0], [21.4, 40.0], [21.5, 40.0], [21.6, 40.0], [21.7, 40.0], [21.8, 41.0], [21.9, 41.0], [22.0, 41.0], [22.1, 41.0], [22.2, 41.0], [22.3, 41.0], [22.4, 41.0], [22.5, 41.0], [22.6, 42.0], [22.7, 42.0], [22.8, 42.0], [22.9, 42.0], [23.0, 42.0], [23.1, 42.0], [23.2, 42.0], [23.3, 43.0], [23.4, 43.0], [23.5, 43.0], [23.6, 44.0], [23.7, 44.0], [23.8, 44.0], [23.9, 45.0], [24.0, 45.0], [24.1, 45.0], [24.2, 45.0], [24.3, 46.0], [24.4, 46.0], [24.5, 46.0], [24.6, 46.0], [24.7, 46.0], [24.8, 46.0], [24.9, 47.0], [25.0, 47.0], [25.1, 47.0], [25.2, 47.0], [25.3, 47.0], [25.4, 47.0], [25.5, 48.0], [25.6, 48.0], [25.7, 48.0], [25.8, 49.0], [25.9, 49.0], [26.0, 49.0], [26.1, 49.0], [26.2, 50.0], [26.3, 50.0], [26.4, 51.0], [26.5, 51.0], [26.6, 51.0], [26.7, 52.0], [26.8, 53.0], [26.9, 53.0], [27.0, 54.0], [27.1, 54.0], [27.2, 55.0], [27.3, 55.0], [27.4, 55.0], [27.5, 56.0], [27.6, 56.0], [27.7, 57.0], [27.8, 58.0], [27.9, 58.0], [28.0, 59.0], [28.1, 59.0], [28.2, 59.0], [28.3, 59.0], [28.4, 60.0], [28.5, 60.0], [28.6, 60.0], [28.7, 60.0], [28.8, 61.0], [28.9, 61.0], [29.0, 61.0], [29.1, 61.0], [29.2, 61.0], [29.3, 61.0], [29.4, 62.0], [29.5, 62.0], [29.6, 62.0], [29.7, 62.0], [29.8, 62.0], [29.9, 62.0], [30.0, 62.0], [30.1, 62.0], [30.2, 62.0], [30.3, 63.0], [30.4, 63.0], [30.5, 63.0], [30.6, 63.0], [30.7, 63.0], [30.8, 63.0], [30.9, 63.0], [31.0, 63.0], [31.1, 63.0], [31.2, 64.0], [31.3, 64.0], [31.4, 64.0], [31.5, 64.0], [31.6, 64.0], [31.7, 64.0], [31.8, 64.0], [31.9, 65.0], [32.0, 65.0], [32.1, 65.0], [32.2, 65.0], [32.3, 65.0], [32.4, 65.0], [32.5, 65.0], [32.6, 65.0], [32.7, 65.0], [32.8, 65.0], [32.9, 65.0], [33.0, 66.0], [33.1, 66.0], [33.2, 66.0], [33.3, 66.0], [33.4, 66.0], [33.5, 66.0], [33.6, 66.0], [33.7, 66.0], [33.8, 67.0], [33.9, 67.0], [34.0, 67.0], [34.1, 67.0], [34.2, 67.0], [34.3, 67.0], [34.4, 67.0], [34.5, 67.0], [34.6, 67.0], [34.7, 67.0], [34.8, 67.0], [34.9, 68.0], [35.0, 68.0], [35.1, 68.0], [35.2, 68.0], [35.3, 68.0], [35.4, 68.0], [35.5, 68.0], [35.6, 68.0], [35.7, 68.0], [35.8, 68.0], [35.9, 69.0], [36.0, 69.0], [36.1, 69.0], [36.2, 70.0], [36.3, 70.0], [36.4, 70.0], [36.5, 70.0], [36.6, 70.0], [36.7, 70.0], [36.8, 70.0], [36.9, 70.0], [37.0, 70.0], [37.1, 71.0], [37.2, 71.0], [37.3, 71.0], [37.4, 71.0], [37.5, 71.0], [37.6, 71.0], [37.7, 71.0], [37.8, 71.0], [37.9, 71.0], [38.0, 72.0], [38.1, 72.0], [38.2, 72.0], [38.3, 72.0], [38.4, 73.0], [38.5, 73.0], [38.6, 73.0], [38.7, 73.0], [38.8, 73.0], [38.9, 73.0], [39.0, 73.0], [39.1, 73.0], [39.2, 73.0], [39.3, 74.0], [39.4, 74.0], [39.5, 74.0], [39.6, 74.0], [39.7, 75.0], [39.8, 75.0], [39.9, 75.0], [40.0, 75.0], [40.1, 75.0], [40.2, 76.0], [40.3, 76.0], [40.4, 76.0], [40.5, 76.0], [40.6, 76.0], [40.7, 76.0], [40.8, 77.0], [40.9, 77.0], [41.0, 78.0], [41.1, 78.0], [41.2, 79.0], [41.3, 79.0], [41.4, 79.0], [41.5, 79.0], [41.6, 79.0], [41.7, 80.0], [41.8, 80.0], [41.9, 80.0], [42.0, 81.0], [42.1, 83.0], [42.2, 84.0], [42.3, 84.0], [42.4, 84.0], [42.5, 86.0], [42.6, 88.0], [42.7, 93.0], [42.8, 96.0], [42.9, 99.0], [43.0, 113.0], [43.1, 115.0], [43.2, 117.0], [43.3, 141.0], [43.4, 154.0], [43.5, 197.0], [43.6, 276.0], [43.7, 422.0], [43.8, 504.0], [43.9, 775.0], [44.0, 823.0], [44.1, 837.0], [44.2, 870.0], [44.3, 883.0], [44.4, 891.0], [44.5, 915.0], [44.6, 918.0], [44.7, 940.0], [44.8, 947.0], [44.9, 968.0], [45.0, 986.0], [45.1, 996.0], [45.2, 1028.0], [45.3, 1057.0], [45.4, 1103.0], [45.5, 1150.0], [45.6, 1177.0], [45.7, 1190.0], [45.8, 1226.0], [45.9, 1258.0], [46.0, 1356.0], [46.1, 1414.0], [46.2, 1490.0], [46.3, 1560.0], [46.4, 1630.0], [46.5, 1732.0], [46.6, 1769.0], [46.7, 1828.0], [46.8, 1898.0], [46.9, 1959.0], [47.0, 1989.0], [47.1, 2043.0], [47.2, 2097.0], [47.3, 2153.0], [47.4, 2210.0], [47.5, 2243.0], [47.6, 2322.0], [47.7, 2392.0], [47.8, 2444.0], [47.9, 2470.0], [48.0, 2526.0], [48.1, 2578.0], [48.2, 2620.0], [48.3, 2639.0], [48.4, 2669.0], [48.5, 2702.0], [48.6, 2736.0], [48.7, 2751.0], [48.8, 2775.0], [48.9, 2803.0], [49.0, 2833.0], [49.1, 2867.0], [49.2, 2887.0], [49.3, 2913.0], [49.4, 2945.0], [49.5, 2983.0], [49.6, 3014.0], [49.7, 3056.0], [49.8, 3089.0], [49.9, 3119.0], [50.0, 3123.0], [50.1, 3155.0], [50.2, 3188.0], [50.3, 3232.0], [50.4, 3258.0], [50.5, 3280.0], [50.6, 3339.0], [50.7, 3394.0], [50.8, 3428.0], [50.9, 3460.0], [51.0, 3509.0], [51.1, 3561.0], [51.2, 3596.0], [51.3, 3626.0], [51.4, 3641.0], [51.5, 3695.0], [51.6, 3751.0], [51.7, 3808.0], [51.8, 3837.0], [51.9, 3900.0], [52.0, 3959.0], [52.1, 4017.0], [52.2, 4043.0], [52.3, 4100.0], [52.4, 4130.0], [52.5, 4172.0], [52.6, 4198.0], [52.7, 4213.0], [52.8, 4251.0], [52.9, 4280.0], [53.0, 4315.0], [53.1, 4335.0], [53.2, 4383.0], [53.3, 4433.0], [53.4, 4453.0], [53.5, 4459.0], [53.6, 4637.0], [53.7, 4669.0], [53.8, 4689.0], [53.9, 4708.0], [54.0, 4728.0], [54.1, 4773.0], [54.2, 4806.0], [54.3, 4834.0], [54.4, 4852.0], [54.5, 4896.0], [54.6, 4924.0], [54.7, 4956.0], [54.8, 4986.0], [54.9, 5036.0], [55.0, 5068.0], [55.1, 5103.0], [55.2, 5116.0], [55.3, 5148.0], [55.4, 5166.0], [55.5, 5176.0], [55.6, 5204.0], [55.7, 5204.0], [55.8, 5225.0], [55.9, 5253.0], [56.0, 5314.0], [56.1, 5335.0], [56.2, 5355.0], [56.3, 5366.0], [56.4, 5404.0], [56.5, 5435.0], [56.6, 5451.0], [56.7, 5462.0], [56.8, 5499.0], [56.9, 5514.0], [57.0, 5541.0], [57.1, 5589.0], [57.2, 5651.0], [57.3, 5692.0], [57.4, 5709.0], [57.5, 5740.0], [57.6, 5772.0], [57.7, 5806.0], [57.8, 5853.0], [57.9, 5880.0], [58.0, 5912.0], [58.1, 5949.0], [58.2, 5978.0], [58.3, 5993.0], [58.4, 6026.0], [58.5, 6071.0], [58.6, 6094.0], [58.7, 6106.0], [58.8, 6126.0], [58.9, 6152.0], [59.0, 6183.0], [59.1, 6215.0], [59.2, 6231.0], [59.3, 6263.0], [59.4, 6295.0], [59.5, 6336.0], [59.6, 6363.0], [59.7, 6388.0], [59.8, 6428.0], [59.9, 6444.0], [60.0, 6467.0], [60.1, 6512.0], [60.2, 6526.0], [60.3, 6552.0], [60.4, 6585.0], [60.5, 6586.0], [60.6, 6652.0], [60.7, 6687.0], [60.8, 6764.0], [60.9, 6794.0], [61.0, 6853.0], [61.1, 6907.0], [61.2, 6935.0], [61.3, 6975.0], [61.4, 6992.0], [61.5, 7026.0], [61.6, 7034.0], [61.7, 7052.0], [61.8, 7061.0], [61.9, 7093.0], [62.0, 7125.0], [62.1, 7157.0], [62.2, 7174.0], [62.3, 7210.0], [62.4, 7238.0], [62.5, 7270.0], [62.6, 7301.0], [62.7, 7321.0], [62.8, 7351.0], [62.9, 7380.0], [63.0, 7415.0], [63.1, 7431.0], [63.2, 7465.0], [63.3, 7496.0], [63.4, 7525.0], [63.5, 7544.0], [63.6, 7575.0], [63.7, 7612.0], [63.8, 7673.0], [63.9, 7737.0], [64.0, 7741.0], [64.1, 7754.0], [64.2, 7789.0], [64.3, 7809.0], [64.4, 7819.0], [64.5, 7835.0], [64.6, 7854.0], [64.7, 7867.0], [64.8, 7881.0], [64.9, 7886.0], [65.0, 7918.0], [65.1, 7931.0], [65.2, 7966.0], [65.3, 7982.0], [65.4, 7997.0], [65.5, 8027.0], [65.6, 8032.0], [65.7, 8060.0], [65.8, 8163.0], [65.9, 8232.0], [66.0, 8280.0], [66.1, 8301.0], [66.2, 8319.0], [66.3, 8367.0], [66.4, 8412.0], [66.5, 8442.0], [66.6, 8456.0], [66.7, 8487.0], [66.8, 8528.0], [66.9, 8562.0], [67.0, 8587.0], [67.1, 8615.0], [67.2, 8646.0], [67.3, 8695.0], [67.4, 8716.0], [67.5, 8751.0], [67.6, 8786.0], [67.7, 8823.0], [67.8, 8858.0], [67.9, 8873.0], [68.0, 8904.0], [68.1, 8955.0], [68.2, 8978.0], [68.3, 8991.0], [68.4, 9026.0], [68.5, 9053.0], [68.6, 9090.0], [68.7, 9107.0], [68.8, 9140.0], [68.9, 9174.0], [69.0, 9207.0], [69.1, 9244.0], [69.2, 9265.0], [69.3, 9299.0], [69.4, 9335.0], [69.5, 9369.0], [69.6, 9384.0], [69.7, 9414.0], [69.8, 9432.0], [69.9, 9473.0], [70.0, 9500.0], [70.1, 9543.0], [70.2, 9599.0], [70.3, 9630.0], [70.4, 9668.0], [70.5, 9684.0], [70.6, 9726.0], [70.7, 9767.0], [70.8, 9801.0], [70.9, 9816.0], [71.0, 9847.0], [71.1, 9887.0], [71.2, 9903.0], [71.3, 9934.0], [71.4, 9966.0], [71.5, 10003.0], [71.6, 10035.0], [71.7, 10079.0], [71.8, 10112.0], [71.9, 10329.0], [72.0, 10344.0], [72.1, 10364.0], [72.2, 10385.0], [72.3, 10390.0], [72.4, 10422.0], [72.5, 10460.0], [72.6, 10489.0], [72.7, 10505.0], [72.8, 10534.0], [72.9, 10567.0], [73.0, 10603.0], [73.1, 10619.0], [73.2, 10650.0], [73.3, 10681.0], [73.4, 10716.0], [73.5, 10732.0], [73.6, 10772.0], [73.7, 10806.0], [73.8, 10835.0], [73.9, 10853.0], [74.0, 10864.0], [74.1, 10915.0], [74.2, 10950.0], [74.3, 10983.0], [74.4, 10998.0], [74.5, 11037.0], [74.6, 11069.0], [74.7, 11101.0], [74.8, 11115.0], [74.9, 11145.0], [75.0, 11180.0], [75.1, 11211.0], [75.2, 11242.0], [75.3, 11263.0], [75.4, 11304.0], [75.5, 11347.0], [75.6, 11401.0], [75.7, 11427.0], [75.8, 11476.0], [75.9, 11555.0], [76.0, 11621.0], [76.1, 11648.0], [76.2, 11716.0], [76.3, 11771.0], [76.4, 11824.0], [76.5, 11875.0], [76.6, 11900.0], [76.7, 11939.0], [76.8, 11999.0], [76.9, 12047.0], [77.0, 12072.0], [77.1, 12119.0], [77.2, 12164.0], [77.3, 12194.0], [77.4, 12208.0], [77.5, 12244.0], [77.6, 12276.0], [77.7, 12308.0], [77.8, 12340.0], [77.9, 12341.0], [78.0, 12393.0], [78.1, 12422.0], [78.2, 12454.0], [78.3, 12468.0], [78.4, 12498.0], [78.5, 12527.0], [78.6, 12559.0], [78.7, 12576.0], [78.8, 12606.0], [78.9, 12636.0], [79.0, 12668.0], [79.1, 12702.0], [79.2, 12716.0], [79.3, 12747.0], [79.4, 12777.0], [79.5, 12838.0], [79.6, 12862.0], [79.7, 12894.0], [79.8, 12906.0], [79.9, 12957.0], [80.0, 12971.0], [80.1, 13005.0], [80.2, 13045.0], [80.3, 13077.0], [80.4, 13108.0], [80.5, 13124.0], [80.6, 13155.0], [80.7, 13188.0], [80.8, 13218.0], [80.9, 13231.0], [81.0, 13256.0], [81.1, 13299.0], [81.2, 13328.0], [81.3, 13377.0], [81.4, 13406.0], [81.5, 13446.0], [81.6, 13474.0], [81.7, 13505.0], [81.8, 13520.0], [81.9, 13554.0], [82.0, 13585.0], [82.1, 13620.0], [82.2, 13636.0], [82.3, 13670.0], [82.4, 13704.0], [82.5, 13734.0], [82.6, 13769.0], [82.7, 13784.0], [82.8, 13818.0], [82.9, 13851.0], [83.0, 13890.0], [83.1, 13904.0], [83.2, 13936.0], [83.3, 13953.0], [83.4, 14000.0], [83.5, 14019.0], [83.6, 14052.0], [83.7, 14084.0], [83.8, 14115.0], [83.9, 14150.0], [84.0, 14164.0], [84.1, 14185.0], [84.2, 14269.0], [84.3, 14291.0], [84.4, 14314.0], [84.5, 14344.0], [84.6, 14378.0], [84.7, 14411.0], [84.8, 14426.0], [84.9, 14458.0], [85.0, 14490.0], [85.1, 14526.0], [85.2, 14556.0], [85.3, 14570.0], [85.4, 14587.0], [85.5, 14619.0], [85.6, 14665.0], [85.7, 14683.0], [85.8, 14714.0], [85.9, 14746.0], [86.0, 14763.0], [86.1, 14793.0], [86.2, 14823.0], [86.3, 14854.0], [86.4, 14887.0], [86.5, 14917.0], [86.6, 14933.0], [86.7, 14967.0], [86.8, 15009.0], [86.9, 15048.0], [87.0, 15063.0], [87.1, 15097.0], [87.2, 15128.0], [87.3, 15162.0], [87.4, 15190.0], [87.5, 15226.0], [87.6, 15256.0], [87.7, 15287.0], [87.8, 15318.0], [87.9, 15335.0], [88.0, 15369.0], [88.1, 15407.0], [88.2, 15474.0], [88.3, 15502.0], [88.4, 15555.0], [88.5, 15608.0], [88.6, 15640.0], [88.7, 15651.0], [88.8, 15670.0], [88.9, 15719.0], [89.0, 15747.0], [89.1, 15776.0], [89.2, 15795.0], [89.3, 15825.0], [89.4, 15840.0], [89.5, 15857.0], [89.6, 15873.0], [89.7, 15886.0], [89.8, 15924.0], [89.9, 15957.0], [90.0, 15986.0], [90.1, 16022.0], [90.2, 16054.0], [90.3, 16086.0], [90.4, 16118.0], [90.5, 16143.0], [90.6, 16194.0], [90.7, 16245.0], [90.8, 16300.0], [90.9, 16318.0], [91.0, 16369.0], [91.1, 16397.0], [91.2, 16426.0], [91.3, 16457.0], [91.4, 16472.0], [91.5, 16503.0], [91.6, 16533.0], [91.7, 16571.0], [91.8, 16582.0], [91.9, 16614.0], [92.0, 16657.0], [92.1, 16719.0], [92.2, 16732.0], [92.3, 16775.0], [92.4, 16806.0], [92.5, 16839.0], [92.6, 16870.0], [92.7, 16883.0], [92.8, 16919.0], [92.9, 16950.0], [93.0, 16980.0], [93.1, 16998.0], [93.2, 17035.0], [93.3, 17065.0], [93.4, 17097.0], [93.5, 17108.0], [93.6, 17139.0], [93.7, 17169.0], [93.8, 17203.0], [93.9, 17234.0], [94.0, 17294.0], [94.1, 17325.0], [94.2, 17365.0], [94.3, 17395.0], [94.4, 17410.0], [94.5, 17439.0], [94.6, 17465.0], [94.7, 17507.0], [94.8, 17523.0], [94.9, 17546.0], [95.0, 17575.0], [95.1, 17605.0], [95.2, 17636.0], [95.3, 17651.0], [95.4, 17683.0], [95.5, 17712.0], [95.6, 17741.0], [95.7, 17756.0], [95.8, 17789.0], [95.9, 17819.0], [96.0, 17852.0], [96.1, 17864.0], [96.2, 17895.0], [96.3, 17923.0], [96.4, 17977.0], [96.5, 18023.0], [96.6, 18047.0], [96.7, 18099.0], [96.8, 18149.0], [96.9, 18199.0], [97.0, 18238.0], [97.1, 18296.0], [97.2, 18349.0], [97.3, 18399.0], [97.4, 18420.0], [97.5, 18472.0], [97.6, 18518.0], [97.7, 18571.0], [97.8, 18623.0], [97.9, 18648.0], [98.0, 18673.0], [98.1, 18695.0], [98.2, 18700.0], [98.3, 18709.0], [98.4, 18723.0], [98.5, 18746.0], [98.6, 18769.0], [98.7, 18771.0], [98.8, 18783.0], [98.9, 18806.0], [99.0, 18827.0], [99.1, 18838.0], [99.2, 18853.0], [99.3, 18870.0], [99.4, 18879.0], [99.5, 18908.0], [99.6, 18934.0], [99.7, 18958.0], [99.8, 19001.0], [99.9, 19090.0], [100.0, 19118.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 760.0, "series": [{"data": [[0.0, 760.0], [100.0, 10.0], [200.0, 2.0], [300.0, 1.0], [400.0, 2.0], [500.0, 1.0], [600.0, 1.0], [700.0, 1.0], [800.0, 8.0], [900.0, 13.0], [1000.0, 4.0], [1100.0, 6.0], [1200.0, 4.0], [1300.0, 2.0], [1400.0, 3.0], [1500.0, 2.0], [1600.0, 3.0], [1700.0, 2.0], [1800.0, 4.0], [1900.0, 3.0], [2000.0, 4.0], [2100.0, 2.0], [2200.0, 4.0], [2300.0, 3.0], [2400.0, 3.0], [2500.0, 4.0], [2600.0, 6.0], [2700.0, 7.0], [2800.0, 7.0], [2900.0, 5.0], [3000.0, 5.0], [3100.0, 7.0], [3200.0, 5.0], [3300.0, 4.0], [3400.0, 4.0], [3500.0, 5.0], [3600.0, 5.0], [3700.0, 3.0], [3800.0, 3.0], [3900.0, 4.0], [4000.0, 3.0], [4100.0, 7.0], [4200.0, 6.0], [4300.0, 4.0], [4400.0, 6.0], [4600.0, 6.0], [4700.0, 5.0], [4800.0, 6.0], [4900.0, 5.0], [5000.0, 5.0], [5100.0, 9.0], [5200.0, 7.0], [5300.0, 7.0], [5400.0, 8.0], [5500.0, 5.0], [5600.0, 4.0], [5700.0, 6.0], [5800.0, 5.0], [5900.0, 6.0], [6000.0, 6.0], [6100.0, 8.0], [6200.0, 6.0], [6300.0, 5.0], [6400.0, 6.0], [6500.0, 8.0], [6600.0, 4.0], [6700.0, 3.0], [6800.0, 3.0], [6900.0, 6.0], [7000.0, 9.0], [7100.0, 6.0], [7200.0, 6.0], [7300.0, 7.0], [7400.0, 6.0], [7500.0, 6.0], [7600.0, 3.0], [7700.0, 8.0], [7800.0, 11.0], [7900.0, 9.0], [8000.0, 6.0], [8100.0, 1.0], [8300.0, 6.0], [8200.0, 4.0], [8400.0, 6.0], [8500.0, 5.0], [8600.0, 6.0], [8700.0, 5.0], [8800.0, 6.0], [8900.0, 6.0], [9000.0, 6.0], [9100.0, 6.0], [9200.0, 6.0], [9300.0, 5.0], [9400.0, 6.0], [9500.0, 5.0], [9600.0, 6.0], [9700.0, 4.0], [9800.0, 6.0], [9900.0, 6.0], [10000.0, 5.0], [10100.0, 1.0], [10300.0, 9.0], [10400.0, 6.0], [10500.0, 6.0], [10600.0, 7.0], [10700.0, 5.0], [10800.0, 7.0], [10900.0, 6.0], [11000.0, 5.0], [11100.0, 7.0], [11200.0, 5.0], [11300.0, 4.0], [11400.0, 4.0], [11500.0, 3.0], [11600.0, 3.0], [11700.0, 4.0], [11800.0, 3.0], [11900.0, 5.0], [12000.0, 4.0], [12100.0, 5.0], [12200.0, 6.0], [12300.0, 6.0], [12400.0, 7.0], [12500.0, 6.0], [12600.0, 6.0], [12700.0, 7.0], [12800.0, 4.0], [12900.0, 6.0], [13000.0, 6.0], [13100.0, 6.0], [13200.0, 7.0], [13300.0, 4.0], [13400.0, 6.0], [13500.0, 6.0], [13600.0, 6.0], [13700.0, 6.0], [13800.0, 6.0], [13900.0, 6.0], [14000.0, 7.0], [14100.0, 6.0], [14200.0, 4.0], [14300.0, 6.0], [14400.0, 6.0], [14500.0, 8.0], [14600.0, 5.0], [14700.0, 6.0], [14800.0, 6.0], [14900.0, 6.0], [15000.0, 6.0], [15100.0, 5.0], [15200.0, 6.0], [15300.0, 6.0], [15400.0, 3.0], [15500.0, 4.0], [15600.0, 6.0], [15700.0, 7.0], [15800.0, 9.0], [15900.0, 5.0], [16000.0, 7.0], [16100.0, 4.0], [16200.0, 3.0], [16300.0, 6.0], [17200.0, 4.0], [16500.0, 7.0], [16400.0, 6.0], [16600.0, 4.0], [16700.0, 5.0], [16800.0, 7.0], [16900.0, 6.0], [17000.0, 6.0], [17100.0, 6.0], [17300.0, 6.0], [17400.0, 6.0], [18200.0, 3.0], [17500.0, 7.0], [17600.0, 7.0], [17700.0, 6.0], [17800.0, 7.0], [17900.0, 5.0], [18000.0, 4.0], [18100.0, 4.0], [18300.0, 4.0], [18400.0, 4.0], [18500.0, 4.0], [18600.0, 7.0], [18700.0, 11.0], [18800.0, 11.0], [18900.0, 6.0], [19000.0, 3.0], [19100.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 19100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 43.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 952.0, "series": [{"data": [[0.0, 775.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 43.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 952.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.63333686E12, "maxY": 301.02035278154693, "series": [{"data": [[1.63333698E12, 1.0], [1.63333692E12, 1.0]], "isOverall": false, "label": "[network\/2] standard test - 1:5", "isController": false}, {"data": [[1.63333698E12, 166.78707224334602], [1.63333704E12, 301.02035278154693]], "isOverall": false, "label": "[network\/2] standard test - 1:50", "isController": false}, {"data": [[1.63333692E12, 1.0]], "isOverall": false, "label": "[network\/2] standard test - 1:1", "isController": false}, {"data": [[1.63333686E12, 1.0], [1.63333692E12, 1.0]], "isOverall": false, "label": "[network\/2] standard test - 2:1", "isController": false}, {"data": [[1.63333692E12, 1.0]], "isOverall": false, "label": "[network\/2] standard test - 1:2", "isController": false}, {"data": [[1.63333698E12, 1.0399999999999996]], "isOverall": false, "label": "[network\/2] standard test - 1:10", "isController": false}, {"data": [[1.63333698E12, 1.0925]], "isOverall": false, "label": "[network\/2] standard test - 1:20", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63333704E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 75.77235772357726, "minX": 1.0, "maxY": 19050.0, "series": [{"data": [[2.0, 852.625], [3.0, 2187.5555555555557], [4.0, 6409.333333333333], [5.0, 9413.0], [6.0, 9425.0], [7.0, 18958.0], [8.0, 18934.0], [9.0, 18908.0], [10.0, 9545.5], [11.0, 18853.0], [12.0, 18827.0], [13.0, 18802.0], [14.0, 9523.5], [15.0, 18750.0], [16.0, 18722.0], [17.0, 18699.0], [18.0, 18675.0], [19.0, 18695.0], [20.0, 18673.0], [21.0, 9786.0], [22.0, 9756.0], [23.0, 19050.0], [24.0, 19001.0], [25.0, 18968.0], [26.0, 9719.5], [27.0, 18906.0], [28.0, 18879.0], [29.0, 18857.0], [30.0, 18830.0], [31.0, 18806.0], [33.0, 18769.0], [32.0, 18783.0], [35.0, 18723.0], [34.0, 18746.0], [36.0, 9768.5], [37.0, 18671.0], [38.0, 5323.75], [39.0, 18623.0], [41.0, 18571.0], [40.0, 18598.0], [43.0, 5355.75], [42.0, 18542.0], [44.0, 6770.333333333333], [45.0, 9673.5], [47.0, 9669.0], [46.0, 18447.0], [48.0, 9661.0], [49.0, 18375.0], [50.0, 9658.5], [51.0, 6709.333333333333], [52.0, 9621.5], [53.0, 9629.0], [55.0, 9613.5], [54.0, 18238.0], [56.0, 9622.5], [57.0, 18149.0], [58.0, 9618.0], [59.0, 9625.5], [60.0, 9625.5], [61.0, 18047.0], [62.0, 9616.0], [63.0, 9616.0], [64.0, 9376.0], [65.0, 9386.5], [67.0, 9389.5], [66.0, 17923.0], [68.0, 9405.0], [70.0, 9413.0], [71.0, 9432.5], [69.0, 17880.0], [72.0, 9446.5], [74.0, 9452.5], [75.0, 9469.5], [73.0, 17819.0], [76.0, 9482.0], [77.0, 6746.666666666667], [79.0, 9516.5], [78.0, 17741.0], [81.0, 9526.0], [82.0, 9548.5], [83.0, 17669.0], [80.0, 17712.0], [84.0, 9554.5], [85.0, 9563.0], [86.0, 6902.666666666667], [87.0, 9603.5], [88.0, 9610.5], [89.0, 9620.0], [90.0, 7171.333333333333], [91.0, 9657.5], [92.0, 9667.0], [93.0, 9675.5], [94.0, 9685.0], [95.0, 9690.0], [97.0, 9693.5], [98.0, 9699.0], [99.0, 17424.0], [96.0, 17465.0], [100.0, 9699.5], [101.0, 9706.5], [102.0, 9711.0], [103.0, 9717.5], [105.0, 9711.0], [106.0, 9716.5], [107.0, 17294.0], [104.0, 17350.0], [108.0, 9693.5], [110.0, 9706.5], [111.0, 17185.0], [109.0, 17218.0], [112.0, 9706.0], [114.0, 9709.5], [115.0, 17123.0], [113.0, 17153.0], [116.0, 9715.0], [118.0, 9723.5], [119.0, 17065.0], [117.0, 17097.0], [120.0, 9721.0], [121.0, 9725.0], [122.0, 9731.5], [123.0, 16998.0], [124.0, 9725.0], [125.0, 9733.0], [127.0, 7337.666666666667], [126.0, 16950.0], [129.0, 7365.0], [130.0, 9743.5], [131.0, 5504.0], [132.0, 9777.5], [133.0, 9779.0], [134.0, 6267.5], [135.0, 9790.5], [128.0, 16919.0], [136.0, 6299.0], [138.0, 6327.25], [140.0, 9803.0], [142.0, 7488.666666666667], [143.0, 9780.0], [141.0, 16681.0], [139.0, 16732.0], [137.0, 16775.0], [144.0, 9779.5], [145.0, 9782.5], [146.0, 9782.5], [147.0, 9792.5], [149.0, 7540.0], [150.0, 9787.5], [151.0, 7565.0], [148.0, 16546.0], [152.0, 9802.5], [153.0, 7578.333333333333], [154.0, 7594.333333333333], [155.0, 9815.0], [157.0, 7619.666666666667], [158.0, 9818.0], [159.0, 9821.5], [156.0, 16426.0], [160.0, 9824.5], [162.0, 9810.0], [164.0, 9804.5], [165.0, 9808.0], [166.0, 9806.5], [167.0, 7677.0], [163.0, 16300.0], [161.0, 16345.0], [168.0, 9814.0], [170.0, 9808.5], [171.0, 9803.0], [172.0, 9810.5], [173.0, 9815.0], [174.0, 9815.5], [175.0, 6718.0], [169.0, 16143.0], [176.0, 9831.5], [177.0, 9835.0], [178.0, 9840.5], [179.0, 7810.333333333334], [181.0, 9849.5], [182.0, 9856.5], [183.0, 15886.0], [180.0, 15938.0], [184.0, 9857.5], [185.0, 9872.0], [187.0, 9870.0], [188.0, 9876.5], [189.0, 9901.0], [191.0, 9901.0], [190.0, 15826.0], [186.0, 15857.0], [192.0, 9906.0], [193.0, 9909.5], [195.0, 9913.0], [196.0, 9919.0], [197.0, 9919.0], [198.0, 9915.0], [199.0, 9908.5], [194.0, 15747.0], [200.0, 6511.8], [201.0, 7100.0], [203.0, 7135.0], [204.0, 9942.5], [202.0, 8098.0], [205.0, 8137.666666666666], [206.0, 9999.5], [207.0, 9992.0], [208.0, 9977.5], [209.0, 9980.5], [210.0, 10063.0], [215.0, 15335.0], [214.0, 15354.0], [213.0, 15369.0], [212.0, 15384.0], [211.0, 15407.0], [216.0, 8207.666666666666], [217.0, 9996.0], [218.0, 9978.0], [219.0, 9978.5], [220.0, 9982.0], [221.0, 9984.0], [222.0, 9986.0], [223.0, 9991.0], [224.0, 9991.0], [225.0, 9984.0], [226.0, 9982.0], [227.0, 8271.333333333334], [229.0, 9984.0], [231.0, 9979.5], [230.0, 15078.0], [228.0, 15113.0], [232.0, 8294.333333333334], [233.0, 9984.0], [234.0, 9982.5], [235.0, 9989.0], [237.0, 8332.0], [238.0, 9992.5], [239.0, 9992.5], [236.0, 14967.0], [240.0, 9994.0], [241.0, 9995.0], [242.0, 8367.0], [243.0, 10001.0], [244.0, 10001.5], [245.0, 8395.666666666666], [246.0, 9986.5], [247.0, 9984.0], [248.0, 8395.666666666666], [249.0, 9983.5], [250.0, 9985.0], [251.0, 8408.333333333334], [253.0, 9991.5], [255.0, 9989.5], [254.0, 14683.0], [252.0, 14714.0], [257.0, 9983.5], [256.0, 9992.0], [258.0, 9973.0], [259.0, 8440.0], [260.0, 9986.5], [261.0, 8464.0], [262.0, 9995.5], [263.0, 14538.0], [264.0, 9991.5], [270.0, 8507.333333333334], [271.0, 14411.0], [268.0, 9986.0], [269.0, 9975.5], [265.0, 9981.0], [266.0, 9976.0], [267.0, 8489.0], [273.0, 10001.5], [272.0, 9991.5], [274.0, 10006.0], [284.0, 14166.0], [275.0, 14344.0], [285.0, 8627.666666666666], [287.0, 14115.0], [286.0, 14135.0], [276.0, 10011.0], [277.0, 10000.5], [278.0, 10000.0], [279.0, 8582.333333333334], [280.0, 10000.0], [281.0, 10020.5], [282.0, 9987.5], [283.0, 8595.333333333334], [289.0, 9998.0], [288.0, 9995.5], [290.0, 10000.0], [291.0, 10000.5], [292.0, 8659.333333333334], [293.0, 10006.0], [294.0, 10005.0], [295.0, 9998.5], [296.0, 10000.5], [303.0, 8724.0], [302.0, 13873.0], [300.0, 10006.5], [301.0, 8716.666666666666], [297.0, 10012.0], [298.0, 8710.0], [299.0, 10006.5], [305.0, 10007.0], [304.0, 10009.5], [306.0, 10009.5], [307.0, 8759.333333333334], [308.0, 10006.0], [309.0, 10015.5], [310.0, 10014.5], [311.0, 10016.0], [312.0, 8801.0], [318.0, 10035.5], [319.0, 13585.0], [316.0, 10032.0], [317.0, 8835.666666666666], [313.0, 10031.0], [314.0, 10029.0], [315.0, 10032.5], [321.0, 10033.0], [320.0, 10034.0], [322.0, 10030.5], [323.0, 8860.333333333334], [324.0, 10028.5], [325.0, 10028.5], [326.0, 8881.666666666666], [327.0, 13460.0], [329.0, 10030.0], [328.0, 13446.0], [333.0, 10024.0], [332.0, 13352.0], [334.0, 13313.0], [335.0, 10031.5], [330.0, 10029.0], [331.0, 8911.333333333334], [348.0, 10042.5], [337.0, 10025.0], [339.0, 10026.5], [338.0, 13231.0], [349.0, 10043.0], [350.0, 10043.5], [351.0, 10039.5], [340.0, 10035.5], [341.0, 13203.0], [342.0, 10033.5], [343.0, 10040.0], [336.0, 13281.0], [344.0, 10034.5], [345.0, 10038.0], [346.0, 10038.5], [347.0, 10041.5], [353.0, 9034.666666666666], [352.0, 10029.0], [354.0, 10023.5], [355.0, 10026.0], [356.0, 10025.0], [357.0, 10018.0], [358.0, 10015.0], [359.0, 10023.0], [360.0, 10025.5], [366.0, 10016.0], [367.0, 9111.333333333334], [364.0, 9084.666666666666], [365.0, 10017.5], [361.0, 10026.5], [362.0, 10025.5], [363.0, 10024.0], [370.0, 9129.333333333334], [369.0, 10018.5], [368.0, 12732.0], [371.0, 10025.0], [380.0, 10033.0], [381.0, 10035.5], [382.0, 10036.0], [383.0, 10036.5], [372.0, 10024.0], [373.0, 9151.0], [375.0, 10025.5], [374.0, 12636.0], [376.0, 10028.0], [377.0, 10028.0], [378.0, 10027.5], [379.0, 9189.0], [396.0, 9301.0], [384.0, 9229.666666666666], [387.0, 10052.0], [386.0, 12454.0], [385.0, 12468.0], [389.0, 10039.5], [388.0, 12422.0], [390.0, 10048.0], [391.0, 12370.0], [392.0, 10040.5], [393.0, 10039.0], [394.0, 10040.0], [395.0, 10038.5], [397.0, 10056.5], [398.0, 10059.0], [399.0, 12244.0], [402.0, 9991.5], [401.0, 9979.5], [400.0, 12226.0], [403.0, 9993.5], [413.0, 11939.0], [412.0, 11973.0], [415.0, 11900.0], [414.0, 11906.0], [404.0, 9991.5], [405.0, 9987.5], [406.0, 9280.0], [407.0, 9991.0], [408.0, 9976.5], [409.0, 9291.666666666666], [411.0, 9965.0], [410.0, 12023.0], [417.0, 9277.0], [416.0, 9920.5], [418.0, 9920.0], [419.0, 9914.5], [420.0, 9900.5], [421.0, 9815.0], [422.0, 9211.666666666666], [423.0, 9224.666666666666], [424.0, 9267.666666666666], [430.0, 9865.5], [431.0, 9864.0], [428.0, 9860.5], [429.0, 9317.666666666666], [425.0, 9970.0], [426.0, 9876.0], [427.0, 11555.0], [433.0, 9857.5], [432.0, 9858.0], [435.0, 9838.5], [434.0, 11347.0], [444.0, 9862.0], [445.0, 9866.0], [446.0, 9866.0], [447.0, 9865.0], [436.0, 9848.5], [437.0, 9372.0], [438.0, 9852.5], [439.0, 9389.333333333334], [440.0, 9857.0], [441.0, 9857.5], [442.0, 9862.0], [443.0, 9862.5], [449.0, 9464.333333333334], [448.0, 9867.0], [450.0, 9882.0], [451.0, 9884.5], [452.0, 9886.0], [453.0, 9882.0], [454.0, 9883.5], [455.0, 9884.5], [456.0, 9532.333333333334], [463.0, 9904.0], [460.0, 9559.0], [461.0, 10864.0], [462.0, 9887.0], [457.0, 9895.0], [458.0, 9896.5], [459.0, 9894.0], [465.0, 9898.5], [464.0, 9906.5], [466.0, 9898.5], [467.0, 9464.5], [468.0, 9912.5], [469.0, 9912.0], [470.0, 9911.0], [471.0, 9911.5], [472.0, 9654.333333333334], [479.0, 9711.333333333334], [478.0, 10603.0], [476.0, 9921.5], [477.0, 9696.666666666666], [473.0, 9914.0], [474.0, 9920.0], [475.0, 9920.0], [481.0, 9935.0], [480.0, 9933.0], [482.0, 9934.5], [483.0, 9935.5], [484.0, 9752.666666666666], [485.0, 9946.0], [486.0, 9944.5], [487.0, 9965.0], [488.0, 9891.285714285716], [495.0, 9858.25], [493.0, 10129.857142857143], [492.0, 10116.0], [494.0, 10029.5], [489.0, 9961.25], [490.0, 9965.25], [491.0, 9967.5], [496.0, 9723.0], [497.0, 9726.5], [498.0, 9711.666666666666], [499.0, 9731.0], [500.0, 9739.5], [1.0, 75.77235772357726]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[150.58305084745768, 5769.988700564975]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 8.533333333333333, "minX": 1.63333686E12, "maxY": 2.0716561033333335E7, "series": [{"data": [[1.63333698E12, 2.0716561033333335E7], [1.63333686E12, 91363.06666666667], [1.63333704E12, 1.683363505E7], [1.63333692E12, 2786573.533333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63333698E12, 1934.9333333333334], [1.63333686E12, 8.533333333333333], [1.63333704E12, 1572.2666666666667], [1.63333692E12, 260.26666666666665]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63333704E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 68.54918032786885, "minX": 1.63333686E12, "maxY": 12578.603799185894, "series": [{"data": [[1.63333698E12, 1028.909592061742], [1.63333686E12, 216.25], [1.63333704E12, 12578.603799185894], [1.63333692E12, 68.54918032786885]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63333704E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 13.114754098360658, "minX": 1.63333686E12, "maxY": 12542.782903663501, "series": [{"data": [[1.63333698E12, 989.6868798235939], [1.63333686E12, 129.0], [1.63333704E12, 12542.782903663501], [1.63333692E12, 13.114754098360658]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63333704E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1.8114663726571094, "minX": 1.63333686E12, "maxY": 14.25, "series": [{"data": [[1.63333698E12, 1.8114663726571094], [1.63333686E12, 14.25], [1.63333704E12, 1.9986431478968756], [1.63333692E12, 3.4508196721311464]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63333704E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 36.0, "minX": 1.63333686E12, "maxY": 19118.0, "series": [{"data": [[1.63333698E12, 6010.0], [1.63333686E12, 610.0], [1.63333704E12, 19118.0], [1.63333692E12, 86.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63333698E12, 36.0], [1.63333686E12, 72.0], [1.63333704E12, 6026.0], [1.63333692E12, 41.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63333698E12, 4413.000000000001], [1.63333686E12, 610.0], [1.63333704E12, 17805.4], [1.63333692E12, 78.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.63333698E12, 5877.839999999999], [1.63333686E12, 610.0], [1.63333704E12, 18934.62], [1.63333692E12, 85.77]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63333698E12, 5234.5999999999985], [1.63333686E12, 610.0], [1.63333704E12, 18671.2], [1.63333692E12, 80.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63333704E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 37.0, "minX": 1.0, "maxY": 16181.0, "series": [{"data": [[2.0, 68.0], [9.0, 67.0], [10.0, 54.5], [11.0, 45.0], [3.0, 72.5], [13.0, 81.0], [1.0, 72.0], [4.0, 69.5], [16.0, 897.5], [17.0, 38.0], [18.0, 37.5], [5.0, 67.0], [20.0, 37.0], [21.0, 2415.0], [22.0, 2430.5], [23.0, 9291.5], [6.0, 74.5], [24.0, 7895.5], [25.0, 7559.0], [26.0, 9138.0], [27.0, 10853.0], [28.0, 12429.5], [29.0, 16181.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 29.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 4.0, "minX": 1.0, "maxY": 16148.0, "series": [{"data": [[2.0, 13.0], [9.0, 11.0], [10.0, 6.5], [11.0, 8.0], [3.0, 13.5], [13.0, 11.0], [1.0, 15.0], [4.0, 11.0], [16.0, 875.0], [17.0, 5.0], [18.0, 5.0], [5.0, 12.0], [20.0, 4.0], [21.0, 2376.0], [22.0, 2393.0], [23.0, 9250.0], [6.0, 12.0], [24.0, 7876.5], [25.0, 7527.0], [26.0, 9104.0], [27.0, 10820.0], [28.0, 12397.5], [29.0, 16148.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 29.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.63333686E12, "maxY": 20.0, "series": [{"data": [[1.63333698E12, 20.0], [1.63333686E12, 0.08333333333333333], [1.63333704E12, 7.383333333333334], [1.63333692E12, 2.033333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63333704E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.63333686E12, "maxY": 15.116666666666667, "series": [{"data": [[1.63333698E12, 15.116666666666667], [1.63333686E12, 0.06666666666666667], [1.63333704E12, 12.283333333333333], [1.63333692E12, 2.033333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63333704E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.63333686E12, "maxY": 15.116666666666667, "series": [{"data": [[1.63333698E12, 15.116666666666667], [1.63333686E12, 0.06666666666666667], [1.63333704E12, 12.283333333333333], [1.63333692E12, 2.033333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63333704E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.63333686E12, "maxY": 15.116666666666667, "series": [{"data": [[1.63333698E12, 15.116666666666667], [1.63333686E12, 0.06666666666666667], [1.63333704E12, 12.283333333333333], [1.63333692E12, 2.033333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63333704E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

