# Status module
# LoadModule status_module modules/mod_status.so
# LoadModule status_module libexec/apache2/mod_status.so
ExtendedStatus On
# LoadModule info_module libexec/apache2/nod_info.so




# Your balanced backends

<Proxy balancer://backend-cluster>
    # Ide kell beírni a Workerek belső hálózati ip címét
    # BalancerMember http://192.168.0.253:8080 retry=1 acquire=900 timeout=360 Keepalive=On
    BalancerMember http://192.168.0.31:8080 Keepalive=On
    BalancerMember http://192.168.0.112:8080 Keepalive=On
    BalancerMember http://192.168.0.119:8080 Keepalive=On
    BalancerMember http://192.168.0.135:8080 Keepalive=On
    BalancerMember http://192.168.0.140:8080 Keepalive=On
    BalancerMember http://192.168.0.152:8080 Keepalive=On
    BalancerMember http://192.168.0.182:8080 Keepalive=On
    BalancerMember http://192.168.0.190:8080 Keepalive=On
    BalancerMember http://192.168.0.174:8080 Keepalive=On
    BalancerMember http://192.168.0.121:8080 Keepalive=On
    BalancerMember http://192.168.0.207:8080 Keepalive=On
    BalancerMember http://192.168.0.164:8080 Keepalive=On

    # ProxySet lbmethod=bybusyness
    # ProxySet lbmethod=bybusyness stickysession=Off
    # ProxySet lbmethod=bybusyness stickysession=Off maxattempts=2

    # Ez akkor kell, ha a Spring alkalmazás session-t használ (pl. login után), és ugyanahhoz a VM-hez kell visszairányítani a felhasználót.
    # Ha stateless API-kat szolgálsz ki, akkor jobb kikapcsolni, különben a kérés mindig ugyanarra a VM-re megy, és nem tud rendesen egyenletesen eloszlani.
    # ProxySet stickysession=JSESSIONID|jsessionid
    ProxySet stickysession=Off

    # Elosztás típusa (bybusyness, byrequests)
    ProxySet lbmethod=bybusyness

    # a Load Balancer több backendhez is próbálkozik, ha az első nem válaszol.
    # ProxySet maxattempts=1
    ProxySet maxattempts=3

    # Meddig vár a proxy egy backend (VM) válaszára (? mielőtt máshová küldené?)
    # ProxySet TimeOut=600
    ProxySet TimeOut=5

</Proxy>

# Ami ide érkezik az továbbításra kerül a VM-ekhez
<VirtualHost *:80>
    ServerName localhost
    
    ServerSignature Off
    
    ProxyPreserveHost On
    
    # ProxyPreserveHost Off
    ProxyRequests Off
    
    # Ez az Apache globális timeoutja: teljes kérés + válasz ciklusra értendő : tehát: mennyi ideig vár az Apache, hogy egy kérés elinduljon, vagy a backend válaszoljon. Mértékegység (másodperc)
    Timeout 120
    
    # Ez a beállítás a ProxyPass vagy BalancerMember számára adja meg, hogy mennyi ideig várjon a proxy (Apache) egy válaszra a backend VM-től, ha már sikerült kapcsolatot nyitni. (másodiperc)
    ProxyTimeout 120

    # Régi és valószínüleg rossz (ettől lassul több VM esetén)
    # SetEnv proxy-nokeepalive 1
    SetEnv proxy-nokeepalive 0

    # Régi és valószínüleg rossz (ettől lassul több VM esetén)
    # SetEnv proxy-initial-not-pooled 1
    SetEnv proxy-initial-not-pooled 0

    # New cucc
    KeepAlive On

    # Ez azt határozza meg, hogy egy TCP kapcsolat (amit a kliens és a szerver között nyitva tartunk a KeepAlive révén) hány HTTP kérést engedjen át, mielőtt bezárjuk azt a kapcsolatot.
    MaxKeepAliveRequests 1000
    
    # Ez adja meg, hogy mennyi ideig maradjon nyitva egy TCP kapcsolat, miután a kliens nem küld több kérést, de még fenn van a kapcsolat. Mértékegység (másodperc) 500
    KeepAliveTimeout 5

    # Proxying everything to your backends
    ProxyPass / balancer://backend-cluster/
    
</VirtualHost>


# Balancer admin külön porton
Listen 8081

<VirtualHost *:8081>
    ServerName balancer-admin

    <Location "/balancer-manager">
        SetHandler balancer-manager
        # Require ip 127.0.0.1 192.168.0.0/16  # csak belső hálózatról elérhető
        Order Allow,Deny
        Allow from all
    </Location>

    <Location "/server-status">
        SetHandler server-status
        <RequireAll>
            Require all granted
        </RequireAll>
    </Location>

    <Location "/server-status">
        SetHandler server-status
        # Require ip 127.0.0.1 192.168.0.0/16
        Order Allow,Deny
        Allow from all
    </Location>

    # https://httpd.apache.org/docs/current/mod/mod_info.html
    <Location "/server-info">
        SetHandler server-info
        Require ip 127.0.0.1 92.249.194.108
    </Location>

    ProxyPass /balancer-manager !
    ProxyPass /server-status !
    ProxyPass /server-info !
    
</VirtualHost>

<Location />
    Order Deny,Allow
    Deny from all
    Allow from 178.164.206.113 192.168.0 195.111.2.2 193.225.250.30
</Location>


# New Fuck
# %D in log format
# LogFormat "%v:%p %h %l %u %t \"%r\" %>s %O \"%{Referer}i\" \"%{User-Agent}i\" %D" vhost_combined
LogFormat "%v:%p %h %l %u %t \"%r\" %>s %O \"%{Referer}i\" \"%{User-Agent}i\" %D" zorba
# LogFormat "%h %l %u %t \"%r\" %>s %O \"%{Referer}i\" \"%{User-Agent}i\" %D" combined
# LogFormat "%h %l %u %t \"%r\" %>s %O %D" common

# Filter advanced
SetEnvIf Status ^200$ log_status_200
SetEnvIf Request_URI "^/cpu" log_url_cpu
SetEnvIf Request_URI "^/wait" log_url_wait
SetEnvIf Request_URI "^/ffmpeg" log_url_ffmpeg

# Egyéni környezeti változó beállítása, ha bármelyik feltétel teljesül
SetEnvIf Request_URI "^/ffmpeg" log_url_spec
SetEnvIf Request_URI "^/wait" log_url_spec
SetEnvIf Request_URI "^/mongodb" log_url_spec
SetEnvIf Request_URI "^/compressAndSave" log_url_spec

# Elvileg most több szabály is érvényesül és az ffmpeg és a wait is bekerül a zulu.log-ba
CustomLog /var/log/apache2/zulu.log zorba env=log_url_spec
